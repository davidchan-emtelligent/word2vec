bmc bioinformatics bmc bioinformatics bmc bioinformatics 1471 - 2105 biomed central london 27130479 4850673 1061 10.1186 / s12859 - 016 - 1061 - 2 research article iped : a highly efficient denoising tool for illumina miseq paired - end 16s rrna gene amplicon sequencing data mysara mohamed leys natalie raes jeroen monsieurs pieter pieter.monsieurs @ sckcen.be unit of microbiology , belgian nuclear research centre ( sck - cen ) , mol , belgium department of bioscience engineering , vrije universiteit brussel , brussels , belgium vib center for the biology of disease , vib , leuven , belgium department of microbiology and immunology , rega institute , ku leuven , belgium 29 4 2016 29 4 2016 2016 17 192 12 3 2016 21 4 2016 ( c ) mysara et al .
2016 open accessthis article is distributed under the terms of the creative commons attribution 4.0 international license ( http :// creativecommons.org / licenses / by / 4.0 /) , which permits unrestricted use , distribution , and reproduction in any medium , provided you give appropriate credit to the original author ( s ) and the source , provide a link to the creative commons license , and indicate if changes were made .
the creative commons public domain dedication waiver ( http :// creativecommons.org / publicdomain / zero / 1.0 /) applies to the data made available in this article , unless otherwise stated .
background the development of high - throughput sequencing technologies has revolutionized the field of microbial ecology via the sequencing of phylogenetic marker genes ( e.g. 16s rrna gene amplicon sequencing ) .
denoising , the removal of sequencing errors , is an important step in preprocessing amplicon sequencing data .
the increasing popularity of the illumina miseq platform for these applications requires the development of appropriate denoising methods .
results the newly proposed denoising algorithm iped includes a machine learning method which predicts potentially erroneous positions in sequencing reads based on a combination of quality metrics .
subsequently , this information is used to group those error - containing reads with correct reads , resulting in error - free consensus reads .
this is achieved by masking potentially erroneous positions during this clustering step .
compared to the second best algorithm available , iped detects double the amount of errors .
reducing the error rate had a positive effect on the clustering of reads in operational taxonomic units , with an almost perfect correspondence between the number of clusters and the theoretical number of species present in the mock communities .
conclusion our algorithm iped is a powerful denoising tool for correcting sequencing errors in illumina miseq 16s rrna gene amplicon sequencing data .
apart from significantly reducing the error rate of the sequencing reads , it has also a beneficial effect on their clustering into operational taxonomic units .
iped is freely available at http :// science.sckcen.be / en / institutes / ehs / mcb / mic / bioinformatics / .
electronic supplementary material the online version of this article ( doi : 10.1186 / s12859 - 016 - 1061 - 2 ) contains supplementary material , which is available to authorized users .
keywords error correction denoising 16s rrna gene amplicon sequencing miseq metagenomics sck - cenphd fellowship mysara mohamed issue - copyright - statement ( c ) the author ( s ) 2016 background the development of high - throughput sequencing technologies has revolutionized the field of microbial ecology by offering a cost - efficient method to assess microbial diversity at an unseen depth .
initial ecological applications mainly relied on the usage of the 454 pyrosequencing platforms , resulting in an impressive repository of bioinformatics analysis tools for processing this kind of data , as used for example in 16s rrna gene amplicon sequencing data .
linking different tools developed for the preprocessing of amplicon sequencing data has resulted in frequently used analysis pipelines such as mothur [ 1 ] , qiime [ 2 ] and uparse [ 3 ] .
due to the recent advances in other high - throughput sequencing technologies regarding throughput and read length , and the announcement of roche to shut down its 454 services by 2016 , sequencing platforms provided for example by pacific biosciences and illumina gain importance for assessing microbial diversity using amplicon sequencing .
however , analysis pipelines developed for 454 pyrosequencing data cannot be translated into an illumina miseq specific pipeline in a straightforward way due to fundamental differences between both sequencing technologies .
indeed , the 454 pyrosequencing technology has difficulties in predicting the exact length of homopolymers , as such mainly leading to indel errors [ 4 , 5 ] .
illumina sequencing data do not suffer from indel errors to the same extent , but rather from nucleotide substitutions ( miscalling ) , mainly originating from two effects : 1 ) high correlation of the intensities of a and c as well as g and t due to similar emission spectra of the fluorophores [ 6 - 8 ] , and 2 ) dependency of the signal of each cycle on the signal before and after this cycle , caused by inadequate flushing of fluorophores , incomplete removal of the 3 ' terminators , or integration of nucleotides without effective 3 ' terminators [ 6 ] , known as phasing and pre - phasing .
additionally , it has been shown that such substitutions are often linked to the presence of the ggc motif , or more in general , to the gc - richness of the amplified region [ 9 - 11 ] .
different approaches have been developed for reducing sequencing errors originating from the illumina miseq sequencing platform .
these approaches can be categorized into three types : 1 ) denoising tools which actively resolve sequencing errors , 2 ) paired - end assemblers that merge overlapping reads into one contig represented by a consensus sequence ( specifically for miseq amplicon paired - end sequencing data ) , and 3 ) quality filtering approaches which remove poor - quality reads or regions .
a large number of denoising algorithms has already been developed for 454 pyrosequencing reads , for example denoiser [ 12 ] , ampliconnoise [ 13 ] , slp [ 14 ] , acacia [ 15 ] and node [ 16 ] .
however , due to fundamental differences in the nature of both sequencing technologies , denoising algorithms developed for 454 pyrosequencing data are likely to perform suboptimal when applied to illumina sequencing data in a naive way .
at this moment , a few algorithms for denoising illumina miseq paired - end amplicon sequencing data have been developed .
one of the 454 pyrosequencing denoising algorithms , i.e. slp [ 14 ] ( implemented as pre.cluster in mothur ) and the more recently released algorithm called unoise [ 17 ] , have been shown to be applicable to illumina miseq specific analysis pipelines [ 5 ] .
however , next to denoising tools , a plethora of tools has been developed for assembling paired - end reads into one amplicon contig , by merging both the forward and reverse reads into one consensus sequence .
apart from the assembly tools integrated in the amplicon sequencing pipelines like mothur , qiime and usearch , other more general paired - end assembly algorithms have been developed such as flash [ 18 ] pandaseq [ 19 ] , cope [ 20 ] and pear [ 21 ] .
additionally , several quality filtering approaches were implemented to identify and remove or trim reads with poor quality , according to specific criteria defined within each tool , as implemented in mothur , qiime and usearch .
despite the fact that paired - end assemblers and quality filtering approaches cannot be seen as genuine denoising tools , they will have an effect on the error rate , and should be included in a benchmark when assessing denoising tools .
in this work we propose the illumina paired - end denoiser ( iped ) algorithm , an error correction algorithm specifically developed for denoising illumina miseq 16s rrna gene amplicon sequencing data .
our machine learning methodology was benchmarked using four different mock datasets , each of them containing sequencing data of different hypervariable regions in the 16s rrna gene , including completely as well as partially overlapping paired - end reads .
working with mock communities consisting of a known set of species had the major benefit that we can use the error rates as most prominent evaluation criterion .
since the amount of data produced within one sequencing run is steadily increasing for the illumina miseq technology , we evaluated the additional computational cost associated with our algorithm .
methods mock communities four publicly available illumina miseq sequencing datasets of mock communities were used within this work .
the first mock community - called mock1 - is composed of 21 species added in equimolar concentrations ( 5 ng / mul ) [ 5 ] .
the second mock community , termed mock2 , has almost the same composition as mock1 , however omitting one species , resulting in 20 different organisms [ 22 ] .
the dna of the mock communities can be obtained from bei resources ( catalog number hm - 278d ) .
both illumina miseq libraries were prepared using primers as described in the work of kozich et al .
[ 5 ] for the amplification of the v34 , v4 and v45 hyper - variable regions of the 16s rrna gene for mock1 , and in the work of nelson et al .
[ 22 ] for the amplification of the v4 and v45 region for mock2 .
both mock communities were sequenced on the illumina miseq platform using the 2 x 250 bp paired - end protocol .
merging both reads into one contig resulted in different contig lengths for each primer pair : contigs resulting from the v4 primer pairs in mock1 and mock2 resulted in a length of 251 - 253 bp ( completely overlapping paired - end reads ) , v45 contigs in mock1 and mock2 in lengths of 375 nt and 390 nt respectively ( overlapping regions of 125 and 110 bp respectively ) and v34 contigs in mock1 in a length of 430 nt ( overlapping region of 70 bp ) .
in mock1 , four sequencing runs were performed with various cluster densities ( id 's : 130401,130403 , 130417 and 130422 ) .
in mock2 , samples for each region ( v4 and v45 ) were run in duplicate ( named v4.i.1 , v4.i.05 , v4.v5.i.1 and v4.v5.i.11 respectively ) .
the third mock community - called mock3 - consists of three samples ( named m1 , m2 , m3 ) , each consisting of 12 species ( sequencing read archive accession number srp066114 ) .
the mock3 community was sequenced on the illumina miseq platform using the 2 x 300 bp paired - end protocol .
merging both reads into one contig resulted in a length of 422 - 428 bp after clipping the primers ( overlapping regions of 141 bp ) .
table 1 provides a detailed description of the mock1 , mock2 and mock3 sequencing datasets .
table 1 overview of the mock sequencing data discussed in this work .
it contains information on the amplified regions , samples id 's , number of paired - end reads ( i.e. contigs ) , average contig length ( i.e. length after merging both paired - end reads ) , and average length of the overlapping part between both paired - end reads name region length overlap id # contigs mock1 [ 5 ] v34 430 70 130401 184216 130403 131241 130417 102547 v4 250 250 130422 79701 130401 1217529 130403 1191998 v45 375 125 130417 1015673 130422 871118 130401 826262 mock2 [ 22 ] v4 250 250 v4.i.1 213043 v4.i.05 240682 v45 390 110 v4.v5.i.1 2484 v4.v5.i.11 90126 mock3 ( srp066114 ) v34 421 140 m1 35168 m2 60488 m3 21723 the fourth mock community - called mock4 - consists of 73 samples and was recently published in schirmer et al .
[ 11 ] .
their microbial composition ranges from a single species to diverse mock communities ( 49 bacteria and 10 archaea ) , mixed either in even or uneven concentrations .
five different illumina miseq library preparation methods were used to amplify the v4 and the v34 region .
contigs constructed by merging both reads resulted in two different lengths , ranging from 253 nucleotides ( i.e. almost completely overlapping reads ) to 450 nucleotides ( partially overlapping reads ) .
a detailed description of mock4 and the sequencing protocols used can be found in the original publication [ 11 ] .
pre - processing steps for all datasets ( mock1 , mock2 , mock3 and mock4 ) contigs were created by merging the paired - end reads using a heuristic based on the difference in phred quality scores of both reads as implemented via the make.contigs command in mothur [ 5 ] .
contigs were culled if they had an ambiguous base or if they were not properly merged .
all sequencing data were trimmed , aligned , screened , filtered and dereplicated using the mothur software package ( v.1.33.3 ) , thereby following the sop as described on the mothur website ( http :// www.mothur.org / wiki / miseq _ sop d.d. 2015 - 05 - 18 ) .
afterwards , reads were denoised ( by any of the tested denoising algorithms ) and chimeras were identified using the " seq.error " command in mothur [ 1 ] using the full length 16s rrna genes of the mock community species as reference .
this " seq.error " command was also used to identify sequencing errors .
to assess the performance of our newly introduced algorithm , iped was benchmarked against the pre - cluster and unoise algorithms , both using the recommended parameter settings as proposed by the initial developers ( described in the mothur miseq sop and the unoise publication respectively [ 17 ]) .
despite the fact that paired - end assembly algorithms cannot be considered as denoising algorithms in the strict sense , their potential influence on the error rate required a comparison with the error rates obtained using iped .
therefore , different paired - end assembly algorithms used for amplicon sequencing were tested on the mock1 , mock2 and mock3 datasets .
algorithms included are the standalone tool pear as well as the assembly steps as included in mothur , qiime and usearch , together with their proposed quality filtering .
an overview of the commands used for those tools is given in additional file 1 : section 4 .
for mock1 , mock2 and mock3 the sequencing reads were clustered in operational taxonomic units ( otu ) using the mothur recommended clustering approach ( shown in additional file 1 : section 8 ) as well as uparse [ 3 ] with default parameters , with the exception of singleton removal .
the default setting of singleton removal was deactivated to accurately assess the effect of sequencing errors on all the otus produced , including singletons .
the exact commands are given in additional file 1 : section 3 .
training data an important component of the iped algorithm is the machine learning method developed to predict potentially erroneous positions .
a dedicated dataset for training and testing this machine learning method was created by randomly selecting reads from sample 130401 of mock1 ( 1,000 reads from the v34 , v4 and v45 region respectively ) , resulting in a dataset of 3,000 reads .
important to notice is that all three samples used to construct the training data were completely disregarded in the subsequent benchmarking analysis .
each nucleotide in those reads was evaluated as being either erroneous ( mismatch , insertion or deletion ) or correct , identified as such by aligning those reads against the reference genomes .
in order to obtain highly reliable training instances , the same parameter setting was applied as used in gilles et al [ 23 ] for running blast [ 24 ] and subsequently clustalw [ 25 ] .
this led to a dataset consisting of 1,031,625 instances ( i.e. all nucleotide positions in the 3,000 reads ) .
these data were cleaned as follows : dereplication , randomization and simplification via selecting a subset of the features ( see further for details on the feature selection step ) .
next , the data were split into three subsets , thereby respecting the initial ratio between erroneous versus non - erroneous instances throughout the three subsets : ( a ) a learning data set for training the classifier , ( b ) a validation set for selecting the most optimal kernel and ( c ) a test data set for testing the accuracy of the classifier .
subset ( a ) and ( b ) were further modified by adjusting the ratio between erroneous and non - erroneous instances : for subset ( a ) , several ratios between erroneous and non - erroneous instances were applied to select the one resulting in the best performance when training the classifier , while for subset ( b ) we used an equal ratio between both classes .
extra information on the feature - selection step and selecting the correct ratio in subset ( a ) is given in section 1 of additional file 1 .
all machine learning methods for training and testing iped were used as implemented in the weka software version 3.7.11 [ 26 ] .
evaluation parameters for the evaluation of iped , we calculated the number of true positives ( tp ) , false negatives ( fn ) , true negatives ( tn ) and false positives ( fp ) as follows : if an erroneous nucleotide was correctly detected as such , it is a tp , if it was not it is a fn , if an non - erroneous nucleotide was correctly detected as such it is a tn , if not it is a fp. we used the mathews correlation coefficient ( mcc ) [ 27 ] : ( tp x tn - fp x fn )/ sqrt (( tp + fp )( tp + fn )( tn + fp )( tn + fn )) , sensitivity ( i.e. the proportion of actual erroneous positions that was detected as such : tp /( tp + fn )) , specificity ( i.e. the proportion of actual non - erroneous positions that was detected as such : tn /( tn + fp )) , and receiver operating characteristics ( roc ) .
the latter analysis combines both sensitivity and specificity by plotting the sensitivity ( y axis ) against one minus the specificity ( x axis )) .
roc curves were produced by swiping the threshold cut - off of the probability estimated by each classifier , and plotting the sensitivity versus one minus the specificity value .
results our newly developed algorithm for denoising illumina miseq amplicon sequencing data was developed in two steps .
first an artificial intelligence classifier was trained to detect potentially erroneous positions in the sequencing reads .
secondly , a modified version of the previously published algorithm ( pre - cluster ) [ 28 ] ( which is the mothur implementation of the single linkage preclustering algorithm [ 14 ]) , was adapted in such a way that it does not penalize those potentially erroneous positions during clustering .
the development of both the classifier and clustering component of the iped algorithm is discussed in the first part of this results section .
once the setup and training of iped has been finalized , the algorithm was tested on a wide range of datasets against pre - cluster and unoise , and this at the level of error rate , computational cost and the accuracy of the otu clustering .
iped development iped classifier the performance of the iped algorithm is largely depending on the ability of its classifier component to correctly identify erroneous positions .
the machine learning approach followed to develop this classifier is based on supervised learning , where we trained the classifier to identify such positions by training it on a dedicated data set ( i.e. a data set containing correct and erroneous positions ) .
training of the iped classifier consisted of four consecutive stages : 1 ) identify those parameters that are potential predictors of sequencing errors ( i.e. feature identification ) , 2 ) select the most informative parameters ( i.e. feature selection ) , 3 ) train the classifier to identify sequencing errors based on those parameters ( i.e. model training ) , and 4 ) check whether the classifier correctly predicts sequencing errors on unseen sequencing data ( i.e. validation ) .
the first stage consisted of extracting a list of features potentially predicting erroneous positions .
different sequencing characteristics have been taken into consideration such as the position in the read , the homopolymer status and phred quality score , the presence of the ggc motif in front of the position in question , the homopolymer status (" 0 " in case of no homopolymer , " - 1 " when the nucleotide is ambiguous , and in case of a homopolymer an ascending number indicating the position within the homopolymer ) and the phred quality score of the preceding and succeeding position for both the forward and reverse reads , totaling up to 16 features .
an additional feature was added indicating whether the nucleotide was situated in the overlapping region of both paired - end reads , and if so to indicate whether they have no conflict , a conflicting base call ( mismatch , deletion or insertion ) , or unknown overlap ( if at least one of both nucleotides is ambiguous ) .
importantly , integrating too many uninformative features would have led to an inflation of the computational cost .
accordingly , reducing the total number of available features ( 17 in total ) while retaining the predictive power of our algorithm has a beneficial effect on the performance of the classifier as it increases its accuracy and reduces the computational cost .
therefore , in a second stage , a feature - selection step was applied using a three - fold cross - validation on the training data .
this approach allowed us to identify those features having a high predictive power for recognizing erroneous positions ( i.e. having a high correlation with the class ' error ' or ' non - error ') , while having a low correlation with other predictive features .
performing this step resulted in a subset of six features i.e. for the forward read : the position in the read , homopolymer status and phred quality score ; for the reverse read : the position in the read and phred quality score ; and as last feature the overlap status between the forward and reverse read .
important to notice within this context is the absence of the ggc motif after the feature selection step .
however , this might not be surprising as we could clearly see a drop in the phred quality score in the positions succeeding this motif ( data not shown ) .
as the phred quality score was retained after applying the feature - selection step , the ggc motif was removed from the features list .
this could be explained either by the weak evidence of error incidences related to the presence of the ggc motif [ 29 ] or due to the high correlation between this motif and the phred quality score , making this feature superfluous .
in the third stage , these six features were used to train a wide range of classifiers available in weka based on subset ( a ) of the training data .
the goal of this step was to select the type of classifier that obtains the highest accuracy in predicting erroneous positions .
in order to optimize the balance between specificity and sensitivity , a range of ratios balancing the number of erroneous versus non - erroneous instances was tested .
the highest sensitivity while maintaining an acceptable specificity was obtained using a ratio of 1:3 ( error : non - error ) ( an overview of different ratios is available within additional file 1 : section 1 ) .
the training process was further evaluated by plotting the learning curves for each of the classifiers , which confirmed that a training dataset size consisting of 5,000 erroneous and 15,000 non - erroneous instances ( respecting the 1:3 ratio ) gave the best performance ( see additional file 1 : section 2 ) .
subset ( b ) of the training data was used to evaluate each of the individual classifiers using sensitivity , specificity , mcc measurements and roc analysis as performance parameters .
additional analyses tested the performance obtained when different sets of classifiers ( ranging from two up to five classifiers ) were combined using plurality voting .
in a plurality voting approach , each of the considered classifiers outputs a confidence score for the classification made and the class with the highest confidence is selected as output for the respective instance .
comparing the performance of the individual classifiers as well as the different voting combinations ( see additional file 1 : section 2 ) , the best performance was achieved via plurality voting combining multilayer perceptron ( mlp - with a learning rate of 0.3 , momentum of 0.2 , and using 6 perceptrons in one hidden layer ) and random forest ( using an ensemble of unpruned decision trees ) .
this combination achieved a sensitivity of 0.57 , specificity of 0.93 , mcc of 0.53 and roc area under the curve ( auc ) of 0.87 on subset ( b ) of the training data , thereby outcompeting the other machine learning approaches .
the additional computational burden resulting from this plurality voting approach was minimal , as the best performing single classifier ( random forest ) required 2.2 sec compared to 2.3 sec for the plurality voting approach ( including mlp and random forest ) ( tested on subset ( c ) of the training data , containing around 200,000 instances ) .
iped clustering as mentioned above , the first step in the development of iped consisted of training a classifier able to predict potentially erroneous positions with high accuracy .
in the second step a modified version of the slp algorithm [ 14 ] as implemented via the pre - cluster command in mothur [ 28 ] has been developed [ 16 ] .
in the original pre - cluster implementation , sequences are sorted based on their abundance level in descending order .
when a rare sequence is at maximum 1 nt per 100 nt differing from a more abundant one , it is merged with the more abundant one and its abundance is added to the latter one .
in the first step of iped , the classifier has marked some of the positions as potentially erroneous .
we have developed a modified version of the mothur pre - cluster algorithm that will not penalize those marked positions when calculating the amount of conflicting positions between two reads .
this means that any position in the alignment containing a nucleotide which is marked as potentially erroneous , will not increase the distance score ( i.e. the score used as cut - off to either merge two reads , or leave them ungrouped ) .
after the clustering step , those masked positions are reverted to their original nucleotide as they were before running iped .
a schematic representation of this approach is given in fig. 1. the iped software can be downloaded via https :// github.com / m - mysara / iped or http :// science.sckcen.be / en / institutes / ehs / mcb / mic / bioinformatics /. fig. 1 schematic overview showing the different steps of the iped algorithm benchmarking of iped impact of denoising algorithms on the error rate once the development of the iped algorithm has been finalized , its performance was compared with those of the pre - cluster and unoise algorithms .
both those tools are the only denoising algorithms currently applicable for illumina amplicon sequencing data .
using the reference 16s rrna gene sequences from the organisms present in the mock1 , mock2 and mock3 communities , we calculated the error rates before applying the denoising algorithms , which were subsequently compared with the error rates obtained after applying iped , pre - cluster and unoise on all three mock datasets .
the error rate was calculated using the seq.error command by taking the ratio of the number of deletions , insertions and substitutions over the total number of bases .
the average error rate before denoising ( i.e. after using the make.contigs command in mothur ) was 0.0005 and 0.0006 for v4 ( mock1 and mock2 respectively ) , 0.0071 and 0.0050 for v45 ( mock1 and mock2 respectively ) 0.0026 and 0.0015 for v34 ( mock1 and mock3 respectively ) .
the fact that the error rate of v4 was up to an order of magnitude lower than both other regions is not surprising since the v4 amplicon fragment consists of two completely overlapping reads , as such assuring a two - fold prediction for each nucleotide .
when comparing the output of iped with the raw error rates , our algorithm was able to reduce on average the error rate with 72 % ( individual values for different regions and runs are varying between 28 % and 94 %) .
when benchmarking those results with unoise and pre - cluster , unoise was able to reduce the error rate on average by 52 % ( individual values varying between an increase of the error rate with 66 % and a decrease of 97 %) while pre - cluster was able to reduce it by 51 % ( individual values varying from 4 % to 86 %) ( see table 2 for all details ) .
on average ( averaged over all mock communities ) , iped diminished the error rate to 0.0010 , while unoise and pre - cluster reduced the overall error rate to the same value of 0.0018 ( see table 2 ) .
however , compared to other denoising algorithms , the effect of iped is more pronounced for those regions with no complete overlap between both paired - end reads ( i.e. region v34 and v45 ) .
importantly , it should be noted that unoise ( as implemented in usearch ) results in an additional loss of on average 13 % of sequencing data due to its more stringent pre - processing steps , as illustrated in supplementary file 1 section 4 .
table 2 overview table comparing error rates of the samples treated with unoise ( after usearch preprocessing ) and those without applying a denoising algorithm , after applying pre - cluster or after applying iped ( after mothur preprocessing ) .
due to the difference preprocessing steps applied in usearch and mothur , the amount of reads removed differ , where around 53 % and 39 % of reads are removed in respective order variable region sample id error rates usearch + unoise mothur ( make.contigs ) mothur + pre - cluster mothur + iped v34 130403 0.0003 0.0026 0.0013 0.0002 130417 0.0004 0.0023 0.0010 0.0003 130422 0.0008 0.0028 0.0017 0.0008 m1 0.0006 0.00149 0.0007 0.0004 m2 0.0007 0.00150 0.0008 0.0006 m3 0.0005 0.00140 0.0007 0.0005 v4 130403 0.00011 0.00056 0.00013 0.00010 130417 0.00009 0.00051 0.00010 0.00008 130422 0.00009 0.00049 0.00010 0.00008 v4.i.1 0.00002 0.00061 0.00008 0.00004 v4.i.05 0.00002 0.00068 0.00010 0.00004 v45 130403 0.0030 0.0084 0.0055 0.0022 130417 0.0029 0.0069 0.0041 0.0020 130422 0.0026 0.0060 0.0033 0.0016 v4.v5.i.1 0.0082 0.0066 0.0061 0.0041 v4.v5.i.11 0.0084 0.0033 0.0034 0.0031 average all samples 0.0018 0.0029 0.0018 0.0010 the same trend in lowering the error rate was observed when running iped on the mock4 dataset .
indeed , when both reads are almost completely overlapping ( contig lengths ranging between 253 and 292 ) , iped was able to reduce the error rate from 0.0041 to 0.0032 .
this effect was more prominent when dealing with contigs with a smaller overlap between both paired - end reads ( contig length ranging between 330 and 450 ) , showing a decrease in the error rate from 0.0065 to 0.0033 ( see additional file 1 : section 5 ) .
however , important to mention within this context is the elevated error rate of this data set , which is significantly higher than should be expected for illumina miseq sequencing data .
as such , caution should be given when extrapolating those results .
plotting the error rates for the mock1 and mock2 datasets versus their position in the amplicon , indicated that the beneficial effect of iped is mainly situated in the uniquely covered region of the second read ( i.e. those positions not overlapping with the first read ) , and to a lesser extent also the overlapping part ( i.e. those positions sequenced twice : a first time via read one , and a second time via read two ) ( see fig. 2 for the v34 and v45 region of mock1 , and section 6 in additional file 1 for more details ). fig. 2 plot showing the error rate versus the position in the read after being treated with pre - cluster ( blue ) , unoise ( violet ) and iped ( red ) .
the raw error rates ( i.e. without applying a denoising algorithm ) are colored black as stated in the introduction , a plethora of algorithms is available for assembling paired - end reads into one amplicon fragment .
even though those algorithms are not denoising algorithms in the strict sense , they can have an impact on the error rate of the resulting fragment .
for this comparison , error rates were calculated for mock1 , mock2 and mock3 after running different assembly algorithms , being fastq _ mergepairs ( usearch ) , make.contigs ( mothur ) , join _ paired _ ends ( qiime ) and pear , which resulted in error rates of 0.0027 , 0.0029 , 0.0031 and 0.0097 respectively ( see additional file 1 : section 4 ) .
important to notice is that the number of reads retained is correlated with the error rate : pear returned the highest error rate , however it managed to retain 86 % of the reads , while usearch reached the lowest error rate but removed more than 53 % of the data .
anyhow , it is clear from those data that the error rates obtained using those assembly algorithms did not come close to the error rates obtained with iped ( run on the output of the mothur make.contigs step ) i.e. 0.0010 .
similar effects were obtained by including iped after the qiime assembly step , leading to an error rate of 0.0014 , which was also significantly lower than the error rate obtained with the assembly steps solely ( data not shown ) .
those data suggest that whatever currently available assembly algorithm is used , running iped afterwards will still have a beneficial effect on the error rate .
to investigate the extra computational cost related to iped , the calculation time was registered for all three samples of the mock1 dataset covering the v4 region , where each sample was subsampled to 6000 unique reads .
when one processor ( single intel xeon e5 - 2640 2.50 ghz cpu ) was used for each sample ( i.e. a total of three processors ) , iped required 70 s for running all three samples , while pre - cluster and unoise could end the analysis in 14 s and 12 s respectively .
similar relative differences in calculation time were also observed for other mock1 , mock2 and mock3 samples ( see additional file 1 : section 7 ) .
impact of denoising algorithms on the otu clustering as the negative effect of sequencing errors has an influence on the amount of spurious otus , ideally an improvement at the level of denoising step should be reflected in a decrease of the number of otus .
although the otu clustering step is influenced by the number of reads and level of complexity in the mock samples , [ 5 ] , it has been used by others as a metric for sequence quality [ 5 , 12 - 14 , 16 , 17 , 28 , 30 ] .
in order to get an idea to which extent iped , unoise and pre - cluster have a beneficial effect on the otu clustering step , sequencing data denoised by either one of the three approaches were clustered using the average neighborhood hierarchical clustering algorithm via the " cluster " command ( as implemented in mothur ) , and subsequently compared with the number of otus obtained when no denoising algorithm was applied .
as the amount of species present in both mock communities is known , in the most ideal scenario the amount of otus returned should be 20 , 19 and 12 for mock1 , mock2 and mock3 respectively .
it is important to emphasize that any undetected chimera or possible contamination would lead to an inflation of the number of the otus .
however , as their effect is the same for all tools , we assume that the number of otus still provides a good indication of the performance .
the average number of otus produced when the denoising step was omitted returned on average 109 , 64 and 127 otus for the v4 , v34 and v45 regions respectively ( combined results of mock1 and mock2 , except for the v45 region of mock1 - see further ) .
iped was able to reduce these numbers to an average of 94 , 48 and 81 while pre - cluster resulted in 110 , 66 and 118 otus respectively and unoise resulted in 120 , 15 and 363 otus respectively .
again , it is important to highlight the impact of the strict pre - processing approach followed by unoise , resulting in a removal of almost all of the reads in mock1 v34 samples in this pipeline , and therefore returning a very low number of otus for the unoise approach .
similarly , for mock3 , the number of otus for the non - denoised data was 90 , while integrating iped , unoise or pre - cluster in the preprocessing pipelines led to 84 , 89 and 107 otus respectively .
altogether , this analysis showed a more beneficial effect of iped on the otu clustering step than pre - cluster and unoise ( see additional file 1 : section 8.1 ) .
concerning the number of otus for the v45 region of mock1 , it was not possible to calculate the number of otus due to high memory requirements , leading to the exclusion of these data sets from the otu analysis .
it should be noted that all mock samples analysed in this work contain a high number of reads per sample ( on average more than 500,000 ) , which is significantly higher than the number of sequences obtained for most real - life microbial diversity studies .
in order to work with more realistic numbers , we rarified the datasets to 5,000 - as proposed in kozich et al .
[ 5 ] - and 25,000 reads per sample .
again , iped outperformed unoise and pre - cluster when applied on the rarefied mock1 , mock2 and mock3 samples ( see additional file 1 : section 8 ) .
moreover , similar results were obtained upon using the uparse clustering algorithm on both complete and rarefied datasets ( see additional file 1 : section 8.1 ) .
however , the analysis performed above starts from an ideal situation , since all chimeras can accurately be removed using the reference sequences from the species present within the mock community .
additionally , the species present in the mock communities are well - known species , incorporated in the reference alignment database , as such resulting in an accurate alignment .
to get an idea on the effect of the different denoising tools in case of a more realistic scenario , i.e. using a regular chimera removal algorithm and the presence of species not represented in the reference alignment database , we applied a regular chimera detection tool ( catch de novo ) [ 31 ] on the mock3 dataset in order to remove chimeric sequences from the mock community .
additionally we removed the corresponding sequences of the species represented in the mock community from the 16s rrna reference alignment database , together with any other sequence showing a similarity higher than 97 % to any of those twelve species .
as reported in section 11 of the additional file 1 , iped was able to outperform pre - cluster and unoise with a reduction of the error rate in the same range as reported earlier , and additionally led to the lowest number of otus .
in order to check the effect of the denoising algorithm on the otu clustering quality , sequencing data were analysed using a preprocessing pipeline where the only varying factor was the denoising algorithm ( iped , pre - cluster or unoise ) .
this way we could assess whether the anticipated species of the mock community could be retrieved .
applying pre - cluster and unoise led to less accurate clustering results as reads originating from the same species where more frequently scattered over different otus .
in general we can conclude that applying iped has a beneficial effect on the otu clustering step when compared with the pre - cluster and unoise results , since for all mock samples the number of otus produced with iped was the closest to the actual number of species .
details on the number of otus are given in section 8 of the additional file 1 .
as a proof of principle , iped was applied on a real data set ( i.e. a non - mock dataset ) to emphasize the effect on a more complex dataset .
however , it is important to stress that unfortunately for those real - life datasets no error rates could be calculated , forcing us to revert to the number of otus as evaluation criterion .
despite the fact that this criterion is inferior to the error rate , it has been used in previous publications [ 30 , 32 , 33 ] .
in this data set , presented in kozich et al .
[ 5 ] , murine fecal samples of mice were used to assess the shifts of the microbial community after weaning at two different stages : early ( 0 - 9 days ) versus late ( 141 - 150 days ) after weaning .
iped was able to reduce the number of spurious otus , as illustrated by the rarefaction curves , and produced a more clear separation of clusters of late versus early stage samples when visualized in principle coordinate analysis ( pcoa ) biplots ( see additional file 1 : section 9 ) .
discussion new sequencing technologies have revolutionized the assessment of microbial diversity via amplicon sequencing .
however , each of the currently available high - throughput sequencing platforms suffers from sequencing errors originating from the sequencing technology itself ( which is different from pcr point errors ) .
in order to prevent the inflation of artificial otus due to these sequencing errors , different algorithms have already been developed for the correction of sequencing errors in 454 pyrosequencing data , for example slp [ 14 ] , ampliconnoise [ 13 ] and denoiser [ 12 ] .
however , assessment of bacterial diversity using the illumina miseq technology is now the standard , as it offers high throughput in combination with an acceptable read length .
recently , the slp - based algorithm pre - cluster ( available as pre.cluster in mothur ) and unoise ( available in usearch ) have been proposed as denoising tools in illumina miseq specific pipelines [ 5 , 17 ] .
in this work , we introduced iped as the best denoising tool specifically oriented towards illumina miseq 16s rrna paired - end reads .
iped was shown to outperform pre - cluster and unoise , as observed on the three mock datasets where our newly introduced algorithm could on average correct double the amount of sequencing errors .
this effect seems to be less pronounced in those paired - end reads having a complete overlap between both reads , as every nucleotide position in the amplicon is covered twice , once by the first read , and once by the second read .
therefore , the added effect of iped is smaller in those latter cases .
moreover , reducing the error rate has a significant effect on the quality of the reads in the otus .
adding an error - correction step before running the otu clustering algorithm , led to a very close correspondence between the number of otus returned , and the true number of species known to be present in the mock communities .
such a significant correspondence could not be obtained when omitting the denoising algorithm in the amplicon sequencing preprocessing pipeline , or via using any other denoising tool .
however , caution should be given when extrapolating this to real - life environmental communities , since the diversity linked to the latter samples will be significantly higher than in the tested mock communities .
despite this increased complexity , running iped on real biological samples still showed a clear improvement , which was visualized using rarefaction curves showing a clear decrease in the number of otus .
moreover , a more accurate correlation was found between biologically related samples when comparing the otu tables produced where iped was integrated into the workflow , as shown in the results by producing denser clusters distinguishing two different biological conditions .
where pre - cluster and unoise have an impressive speed , iped needs more calculation time due to the machine learning classifier required in the first step of iped .
however , as seen in the results , iped led to a more pronounced improvement in accuracy compared to both of them .
at this stage we only tested our iped algorithm on mock datasets containing paired end reads that are at least partially overlapping , or in some cases completely overlapping .
recent papers suggest the usage of primer pairs for amplicon sequencing producing paired - end reads which are not overlapping at all , as this approach allows flexibility in development of pcr primers and selection of the hypervariable regions .
this way those primers can be selected that allow the most optimal distinction for a specific type of sample [ 34 ] .
within this area iped can have a more pronounced effect on the final results as our algorithm was shown to be most effective in the non - overlapping part of the second read , which in such a case would mean the complete second read .
iped has only been tested on 16s rrna gene amplicon sequencing data .
in principle our tool can be used for any amplicon sequencing data set , such as 18s rrna , 23s rrna or 28s rrna , whenever a reliable reference alignment dataset is available .
iped was developed to be applied after the mothur make.contigs command ; yet , further adjustments are needed to make it compatible with other paired - end assemblers .
preliminary data showed that iped was able to reduce the error rate of qiime to the same extent .
conclusion we have presented in this work the denoising algorithm iped specifically developed for illumina miseq 16s rrna gene amplicon sequencing data .
iped obtains a better performance on mock datasets compared with the available alternatives pre - cluster and unoise , and on average can correct double the amount of errors compared to both algorithms .
the beneficial effect of this improved denoising was reflected in more accurate otu clustering results .
ethics approval and consent to participate not applicable .
consent for publication not applicable .
availability of data and materials four publicly available illumina miseq sequencing datasets of mock communities were used within this work .
the first mock community ( mock1 ) is available at http :// www.mothur.org / miseqdevelopmentdata.html as presented in kozich et al .
[ 5 ] .
the second mock community ( mock2 ) is available in the ebi european nucleotide archive under the project id prjeb4688 , and is presented in the work of nelson et al .
[ 22 ] .
the third mock community ( mock3 ) is available at the ncbi sequence read archive under the accession number srp066114 .
the fourth mock community ( mock4 ) is available on the european nucleotide archive under the project number prjeb6244 as presented in schirmer et al .
[ 11 ] .
the software developed within this work ( iped ) is available via github ( https :// github.com / m - mysara / iped ) or via http :// science.sckcen.be / en / institutes / ehs / mcb / mic / bioinformatics / , including documentation and a tutorial video .
additional file additional file 1 : extra information describing the development of the machine learning implementation ( training and testing ) , pre - processing of the sequencing data , computational costs and comparative analyses .
( docx 3212 kb ) abbreviations iped illumina miseq paired - end denoiser otu operational taxonomic unit tp true positives fn false negatives tn true negatives fp false positives mcc mathews correlation coefficient roc receiver operating characteristics mlp multilayer perceptron auc area under the curve pcoa principle coordinate analysis competing interest the authors declare that they have no competing interests .
authors' contributions conceived and designed the experiment : mm , jr and pm. computational analysis and analysis of the data : mm and pm. wrote the paper : mm , nl , jr and pm. all authors read and approved the final manuscript .
funding this work is funded by an sck - cen phd grant .
references 1 .
schloss pd westcott sl ryabin t hall jr hartmann m hollister eb lesniewski ra oakley bb parks dh robinson cj sahl jw stres b thallinger gg van horn dj weber cf introducing mothur : open - source , platform - independent , community - supported software for describing and comparing microbial communities appl environ microbiol 2009 75 7537 41 10.1128 / aem.01541 - 09 19801464 2 .
caporaso jg kuczynski j stombaugh j bittinger k bushman fd costello ek fierer n pena ag goodrich jk gordon ji huttley ga kelley st knights d koenig je ley re lozupone ca mcdonald d muegge bd pirrung m reeder j sevinsky jr turnbaugh pj walters wa widmann j yatsunenko t zaneveld j knight r qiime allows analysis of high - throughput community sequencing data nat methods 2010 7 335 6 10.1038 / nmeth.f.303 20383131 3 .
edgar rc uparse : highly accurate otu sequences from microbial amplicon reads nat methods 2013 10 996 8 10.1038 / nmeth.2604 23955772 4 .
loman nj misra rv dallman tj constantinidou c gharbia se wain j pallen mj performance comparison of benchtop high - throughput sequencing platforms nat biotechnol 2012 30 434 9 10.1038 / nbt.2198 22522955 5 .
kozich jj westcott sl baxter nt highlander sk schloss pd development of a dual - index sequencing strategy and curation pipeline for analyzing amplicon sequence data on the miseq illumina sequencing platform appl environ microbiol 2013 79 5112 20 10.1128 / aem.01043 - 13 23793624 6 .
kircher m stenzel u kelso j improved base calling for the illumina genome analyzer using machine learning strategies genome biol 2009 10 r83 10.1186 / gb - 2009 - 10 - 8 - r83 19682367 7 .
bentley dr balasubramanian s swerdlow hp accurate whole human genome sequencing using reversible terminator chemistry nature 2008 456 53 9 10.1038 / nature07517 18987734 8 .
rougemont j amzallag a iseli c farinelli l xenarios i naef f probabilistic base calling of solexa sequencing data bmc bioinformatics 2008 9 431 10.1186 / 1471 - 2105 - 9 - 431 18851737 9 .
allhoff m schonhuth a martin m costa ig rahmann s marschall t discovering motifs that induce sequencing errors bmc bioinformatics 2013 14 suppl 5 s1 10.1186 / 1471 - 2105 - 14 - s5 - s1 23735080 10 .
tsai ij hunt m holroyd n huckvale t berriman m kikuchi t summarizing specific profiles in illumina sequencing from whole - genome amplified dna dna res 2014 21 243 54 10.1093 / dnares / dst054 24353264 11 .
schirmer m ijaz uz d'amore r hall n sloan wt quince c insight into biases and sequencing errors for amplicon sequencing with the illumina miseq platform nucleic acids res 2015 43 6 e37 10.1093 / nar / gku1341 25586220 12 .
reeder j knight r rapidly denoising pyrosequencing amplicon reads by exploiting rank - abundance distributions nat methods 2010 7 668 9 10.1038 / nmeth0910 - 668b 20805793 13 .
quince c lanzen a davenport rj turnbaugh pj removing noise from pyrosequenced amplicons bmc bioinformatics 2011 12 38 10.1186 / 1471 - 2105 - 12 - 38 21276213 14 .
huse sm welch dm morrison hg sogin ml ironing out the wrinkles in the rare biosphere through improved otu clustering environ microbiol 2010 12 1889 98 10.1111 / j.1462 - 2920.2010.02193.x 20236171 15 .
bragg l stone g imelfort m hugenholtz p tyson gw fast , accurate error - correction of amplicon pyrosequences using acacia nat methods 2012 9 425 6 10.1038 / nmeth.1990 22543370 16 .
mysara m leys n raes j monsieurs p node : a fast error - correction algorithm for pyrosequencing amplicon reads bmc bioinformatics 2015 16 88 10.1186 / s12859 - 015 - 0520 - 5 25888405 17 .
edgar rc flyvbjerg h error filtering , pair assembly , and error correction for next - generation sequencing reads bioinformatics 2015 31 3476 82 10.1093 / bioinformatics / btv401 26139637 18 .
magoc t salzberg sl flash : fast length adjustment of short reads to improve genome assemblies bioinformatics 2011 27 2957 63 10.1093 / bioinformatics / btr507 21903629 19 .
masella ap bartram ak truszkowski jm brown dg neufeld jd pandaseq : paired - end assembler for illumina sequences bmc bioinformatics 2012 13 31 10.1186 / 1471 - 2105 - 13 - 31 22333067 20 .
liu b yuan j yiu s - m li z xie y chen y shi y zhang h li y lam t - w luo r cope : an accurate k - mer - based pair - end reads connection tool to facilitate genome assembly bioinformatics 2012 28 2870 4 10.1093 / bioinformatics / bts563 23044551 21 .
zhang j kobert k flouri t stamatakis a pear : a fast and accurate illumina paired - end read merger bioinformatics 2014 30 614 20 10.1093 / bioinformatics / btt593 24142950 22 .
nelson mc morrison hg benjamino j grim sl graf j analysis , optimization and verification of illumina - generated 16s rrna gene amplicon surveys plos one 2014 9 e94249 10.1371 / journal.pone.0094249 24722003 23 .
gilles a meglecz e pech n ferreira s malausa t martin j - f accuracy and quality assessment of 454 gs - flx titanium pyrosequencing bmc genomics 2011 12 245 10.1186 / 1471 - 2164 - 12 - 245 21592414 24 .
altschul sf gish w miller w myers ew lipman dj basic local alignment search tool j mol biol 1990 215 403 10 10.1016 / s0022 - 2836 ( 05 ) 80360 - 2 2231712 25 .
thompson jd higgins dg gibson tj clustal w : improving the sensitivity of progressive multiple sequence alignment through sequence weighting , position - specific gap penalties and weight matrix choice nucleic acids res 1994 22 4673 80 10.1093 / nar / 22.22.4673 7984417 26 .
hall m national h frank e holmes g pfahringer b reutemann p witten ih the weka data mining software : an update sigkdd explor 2009 11 10 18 10.1145 / 1656274.1656278 27 .
matthews bw comparison of the predicted and observed secondary structure of t4 phage lysozyme biochim biophys acta 1975 405 442 51 10.1016 / 0005 - 2795 ( 75 ) 90109 - 9 1180967 28 .
schloss pd gevers d westcott sl reducing the effects of pcr amplification and sequencing artifacts on 16s rrna - based studies plos one 2011 6 e27310 10.1371 / journal.pone.0027310 22194782 29 .
nakamura k oshima t morimoto t ikeda s yoshikawa h shiwa y ishikawa s linak mc hirai a takahashi h altaf - ul - amin m ogasawara n kanaya s sequence - specific error profile of illumina sequencers nucleic acids res 2011 39 e90 10.1093 / nar / gkr344 21576222 30 .
kunin v engelbrektson a ochman h hugenholtz p wrinkles in the rare biosphere : pyrosequencing errors can lead to artificial inflation of diversity estimates environ microbiol 2010 12 118 23 10.1111 / j.1462 - 2920.2009.02051.x 19725865 31 .
mysara m saeys y leys n raes j monsieurs p catch , an ensemble classifier for chimera detection in 16s rrna sequencing studies appl environ microbiol 2015 81 1573 84 10.1128 / aem.02896 - 14 25527546 32 .
huber ja mark welch db morrison hg huse sm neal pr butterfield da sogin ml microbial population structures in the deep marine biosphere science 2007 318 97 100 10.1126 / science.1146689 17916733 33 .
sogin ml morrison hg huber ja mark welch d huse sm neal pr arrieta jm herndl gj microbial diversity in the deep sea and the underexplored " rare biosphere " proc natl acad sci u s a 2006 103 12115 20 10.1073 / pnas.0605127103 16880384 34 .
jeraldo p kalari k chen x bhavsar j mangalam a white b nelson h kocher j - p chia n im - tornado : a tool for comparison of 16s reads from paired - end libraries plos one 2014 9 e114804 10.1371 / journal.pone.0114804 25506826