plos biol plos biol plos plosbiol plos biology 1544 - 9173 1545 - 7885 public library of science san francisco , ca usa 26600012 4658184 10.1371 / journal.pbio.1002303 pbiology - d - 15 - 02032 community page computing workflows for biologists : a roadmap shade ashley 1 2 * teal tracy k .
2 3 1 department of microbiology and molecular genetics , michigan state university , east lansing , michigan , united states of america 2 beacon center for the study of evolution in action , michigan state university , east lansing , michigan , united states of america 3 data carpentry , datacarpentry.org the authors have declared that no competing interests exist .
* e - mail : shadeash @ msu.edu 24 11 2015 11 2015 24 11 2015 13 11 e1002303 ( c ) 2015 shade , teal 2015 shade , tealthis is an open - access article distributed under the terms of the creative commons attribution license , which permits unrestricted use , distribution , and reproduction in any medium , provided the original author and source are properly credited .
extremely large datasets have become routine in biology .
however , performing a computational analysis of a large dataset can be overwhelming , especially for novices .
here , we present a step - by - step guide to computing workflows with the biologist end - user in mind .
starting from a foundation of sound data management practices , we make specific recommendations on how to approach and perform computational analyses of large datasets , with a view to enabling sound , reproducible biological research. with the biologist in mind , this community page presents a practical strategy for computing workflows that emphasizes reproducible research .
this work was supported by michigan state university , by the national science foundation under cooperative agreement no. dbi - 0939454 , and by the national institute of general medical sciences of the national institutes of health under award number r25gm115335 to as and tkt .
the funders had no role in study design , data collection and analysis , decision to publish , or preparation of the manuscript .
introduction in today 's technology - driven era of biological discovery , many biologists generate extremely large datasets , including high - throughput sequencing , proteomic and metabolomic spectra , and high - content imaging screens .
subsequently , biologists must overcome many challenges of incorporating computing into their standard procedures for data analysis , including installing and running software that is not " point - and - click ," navigating at the command - line interface , comparing various analysis tools that supposedly perform the same tasks , establishing effective note - taking for their computing trials , and managing large datasets .
especially for trainees , it can be overwhelming to know how to begin to address these challenges .
providing a roadmap for workflow approach and management is likely to accelerate biologists' skill - building in computing .
there are ongoing conversations regarding best practices for computing in biology .
in 2009 , arguably just prior to the " big data " deluge , noble provided a great perspective on organizing bioinformatics projects [ 1 ] .
recent works have promoted methods for reproducibility in computational research [ 2,3 ] , provided guidelines for writing software and tools [ 1,4 - 6 ] and advocated for training for the next generation of scientists in computing [ 7 - 9 ] .
aiming to complement and extend upon these works with the biologist end - user in mind , we outline an approach to computational analysis of any large dataset .
the roadmap emphasizes tasks that help the user to understand the many choices that inevitably are made as part of a computing workflow .
the intent is for the user to systematically query choices in software and parameters , compare options to understand the impact of each on the outcome and interpretation of results , and , ultimately , to make analysis decisions that are most appropriate and biologically or statistically defensible for the dataset in hand .
our roadmap also includes a series of specific internal ( e.g. , within a research group ) and external ( e.g. , at peer review ) checkpoints for reproducibility , provides suggestions for effective note - taking in computing , and advocates a team approach to sharing responsibility for analysis and data management .
it is important to emphasize that a good workflow starts with good data management and organization practices .
the starting place for analyses is ( 1 ) primary (" raw ") data , the unprocessed data generated from a specific technology such as a sequencing machine , and ( 2 ) the data about that data , or metadata ( box 1 ) , that contains information about how the data was collected and generated .
unmodified versions of both raw data and metadata should be stored securely , read - only ( so it ca n't accidentally be modified ) with backups .
if any manipulation has been done to the dataset from a facility for quality filtering or other processes , that information should also be retained as part of the metadata .
finally , initial data files should be organized so that they are computer - readable and in nonproprietary formats .
these files are the cornerstone of any project and serve as a starting place for reproducing results , starting new analyses or continuing further work .
these recommendations have been well outlined in [ 2,3 ] and are foundational for effective and reproducible analyses .
this paper builds on that foundation , and focuses on the next steps : analysis workflow best practices .
box 1 .
terms used in this paper approach : a variable within a tool that specifies a statistical / bioinformatics process ; e.g. , an operational taxonomic unit ( otu ) picking algorithm in amplicon analysis control analysis : using provided , simulated or mock data to ground expectations of software performance metadata : descriptors ( may be qualitative or quantitative ) of the biological ( e.g. , experimental conditions ) and technical ( e.g. , sequencing protocol used ) aspects of the data parameter space : all possible variables , methods , and tools available to analyze a dataset parameterization : the process of determining the " best " option for a given dataset or analysis problem raw data : the un - manipulated data exactly as it is returned by the technology that generated it sanity checks : small tests to ensure that script input and output files match expectations sensitivity analysis : the process of determining which options are most robust to outcomes in the analysis ; sometimes called sensitivity scan tool / software : a compilation of functional code with or without a user interface that performs a statistical or bioinformatics task on a given input dataset variable : the user - defined options within a single tool .
default values are set by the developer ( s ) ; also called flag or option version control : automatic management of user edits to any type of document , including code and workflows .
typically records timestamp , author of the change , and the exact revisions to the file .
workflow : the complete set of steps required to analyze a dataset from start to finish a roadmap for the computing biologist i. consider the overarching goals of the analysis before beginning analyses , call to mind the goals of the project .
for instance , working to address a given hypothesis will motivate different analysis strategies than conducting data exploration .
a clear vision as to the ultimate project goals will direct the workflow , constrain analysis choices , and keep users on task to achieve their objectives. ii. adopt an iterative , branching pattern to systematically explore options biologists embarking on the study of a new dataset face many analysis choices .
particularly in bioinformatics , at each step of the process there are multiple software available , each with its own set of variables .
because datasets have unique designs , biases , and underlying assumptions , a default option offered by a software is often not the most appropriate choice and must be re - evaluated for a new dataset .
biologists therefore often decide to try several software packages and analysis variables to determine the best match for their data type and set of questions .
this set of all possible combinations of values for the different software and their options can be thought of as parameter space .
here we refer to parameters as the set of all possible options and variables as the options within a given software package .
this is analogous to wet bench work , in which there are multiple steps or even protocols in each experiment and decisions must be made as to what components most affect experiment outcomes or are important to vary to optimize results ( table 1 ) .
exploring this parameter space is an important step for a biologist to understand what the tool does and how it performs , and also to interpret the results for the specific dataset in question .
however , it is challenging to keep track of the choices and results to effectively evaluate the most appropriate workflow ( see section iv : " taking notes for computational analyses ") .
we suggest using an iterative , branching pattern for exploring parameter space , employing sensitivity analysis , sanity checks , and the potential use of control analyses .
10.1371 / journal.pbio.1002303.t001 table 1 analogies between computing and " wet - bench " experiments .
computing task wet - bench analogy example exploring parameter space using multiple experimental designs to address a hypothesis complementing in vitro and in vivo ( and in silico !) experiments comparing different computing tools or software comparing protocols that perform the same task comparing kits from different manufacturers for nucleic acid extraction changing variables ( flags or options ) within a computing tool making minor adjustments in a single protocol changing buffer conditions in a pcr in sensitivity analysis , the researcher determines how the outcomes of the analysis are affected by each of the parameter choices ( fig 1 ) .
in this approach , one tool and its defaults are selected as a starting point .
the user then changes the default value for each variable in turn and determines how each change affects the analysis outcomes .
values can range from defaults to those that are extreme or nonsensical to bracket expectations of potential outcomes .
for every change in a variable imposed by the user , the corresponding input and outcome are documented .
this process allows the biologist to determine which variables are most important for a given dataset , and while there may not be a universal " correct " value for each variable , the researcher can evaluate trade - offs and make an informed selection of appropriate values .
when the final selection is made for each variable , she can record and annotate them with her rationale for the choices .
10.1371 / journal.pbio.1002303.g001 fig 1 workflow for biological computing .
the workflow begins with read - only , secure raw data and ends with final code and data , ultimately accessible in a version - controlled repository ( green boxes and arrows ) .
default and alternative parameters are explored and compared for each tool to optimize the analysis , and best choices ( red boxes / text ) are informed by biological and statistical expectations of the data .
purple ellipses show reproducibility checkpoints , with self - checkpoints numbered consecutively ( here , 1 through 4 ) .
purple dashed lines show iterative steps in the workflow that occur at reproducibility checkpoints .
the workflow - in - progress is edited at every step until the documentation and code are finalized .
the biologist then moves on to the next step in the workflow or evaluates another tool at that same stage of the workflow .
exploration continues for each step independently , while the user refines a final workflow with the best variable values , methods , and tools at each step .
often , the user may want to return to a previous step to ask how changing a parameter influences a subsequent step .
an example schematic for microbial genome assembly is provided in fig 2 .
notably , an independent software may be needed to evaluate analysis choices .
for example , in fig 2 , fastqc is a software that can be used to assess and compare the effectiveness of different quality - filtering tools .
10.1371 / journal.pbio.1002303.g002 fig 2 a simplified schematic of an example workflow for bacterial or archaeal genome assembly .
these tools represent just a subset of those available , for illustration purposes .
for example , trimmomatic is one tool for trimming illumina fastq data and removing adapters .
in light of the many alternatives at each step , it is important to remain focused on the ultimate task at hand , which is to address the hypothesis for which the dataset was generated .
we do not recommend exhaustively exploring all parameter space , but to carefully consider those tools and variables that are important for the dataset and hypothesis .
in the beginning of analysis , new users often require more time devoted to exploring options so that a greater understanding of the tool can be achieved .
however , we caution users to not spiral down an analysis path of endless options .
there are simply some options that do not matter for the outcome of the analysis , and these should be identified quickly and not considered further .
for biologists just beginning in computing , making an in - person appointment with a bioinformatician , computing core facility staff member , or knowledgeable colleague can provide invaluable insights into which analysis options matter .
for new users , especially , self - imposed sanity checks are a helpful component of workflow development .
these are small tests conducted while running software or executing code to make sure that the output matches expectations .
for instance , does the number of sequences being returned match the number input or what was expected to be retained ? is the output returning integers or nonsensical values ? is the script to remove headers actually removing them and how could this be checked ?
incorporating frequent sanity checks into the workflow will help the user to understand how the software and scripts are working and avoid " black - box " thinking , in which input and output are assumed to be correct .
it also will strengthen the computing skills of the user as she develops creative ways to test whether the tools are running properly .
often , within complex biological datasets , researchers do not know what the outcome of their data analysis should be , and there is not a clean , directly comparable " control. " instead , biologists ask if a particular analysis meets their biological and statistical expectations of their data , and further question whether that expectation is met differently when using other comparable analysis approaches ( e.g. , [ 10 ]) .
in order to ground expectations , one approach is to use a mock or simulated dataset , in which the expected outcome is known .
this is most analogous to a positive experimental control and can be thought of as control analyses .
mock datasets have been used in microbial marker gene analyses , in which , in parallel to sequencing a " wild " microbial community , a mock community of known isolates in known proportions is constructed and sequenced to calculate an error rate [ 11 ] .
another control exercise to ensure that the software is performing as expected is to use the software first with the developer 's provided dataset as a tutorial , ensuring reproducibility of their results. iii .
reproducibility checkpoints reproducibility checkpoints are places in a workflow devoted to scrutinizing its integrity ( table 2 ) .
when scrutinizing , there are three main considerations .
the first is that the workflow ( or step in the workflow ) can be seamlessly used ( it does n't crash halfway or return error messages ) , and the second is that the outcomes are consistent and validated across multiple , identical iterations .
in other words , the computational experiment must be replicated and found to be reproducible [ 2 ] .
finally , results should make biological sense ; it is possible to generate reproducible computational results that are biologically meaningless .
10.1371 / journal.pbio.1002303.t002 table 2 reproducibility checkpoints during the development and refinement of a computational workflow .
type on what ? by whom ?
self * every parameterized step in a workflow * final , complete workflow * final batch script * user ( s ) who develops the analysis workflow internal * final , complete workflow * final batch script * at least one colleague in the research group * research group leader / principal investigator ( pi ) external * final , complete workflow * final batch script * crowdsourcing ( e.g. , github / bitbucket / r community )* informal review ( archivex , peerj preprint )* reviewers and editor of a submitted manuscript when users are working in teams to develop a workflow , checkpoints often come automatically as different users try to repeat and expand on each other 's work [ 6 ] .
however , an independent user may have no formal mechanism of accountability from teammates .
thus , we recommend that , as a workflow is being developed , the user self - imposes reproducibility checkpoints at the end of each step .
the workspace should be cleared , and the step run from scratch with the dedicated input files .
if computational run times are too long to be practical , we recommend sub - setting the dataset and working with this manageable subset to develop the workflow .
after the last step , the entire workflow may be similarly run from scratch with a clear workspace ( fig 1 , see self - checkpoint 4 ) .
at this point , the user has completed her first draft of the workflow , and may ask for an internal review by a colleague .
the colleague should try to reproduce the results at each step and run the workflow without error , and they should test a batch script that automatically performs each step to come to the final results file .
the team leader or principle investigator ( pi ) should be able to execute the workflow and reproduce the results .
we recommend that the pi review the workflow before any manuscript is drafted so that there is an opportunity to identify errors in the workflow and correct them before conclusions are drawn from the results .
afterwards , the input files , annotated workflow , and batch script may be made available for external review .
an especially rigorous set of reproducibility checkpoints will occur if the workflow is crowdsourced to developer communities for informal review , such as through github , bitbucket , or r communities , or through pre - review mechanisms like arxiv or peerj pre - prints .
also , we strongly recommend making all of the relevant analysis files ( demo datasets , full datasets , metadata , documentation , and code ) available to the editor and reviewers when a manuscript is submitted , which will promote replication of the computational experiment [ 2 ] .
visualizing data at reproducibility checkpoints can help to evaluate the performance of the analysis .
embedding data visualization into the analysis workflow will also promote generation of reproducible figures that can be used for publication .
creating code and documentation for generating figures is another important aspect of reproducible science. iv. taking notes for computational analyses from the first moment of an undergraduate research experience , most biologists are trained on the importance of keeping meticulous and up - to - date laboratory notes for posterity , reproducibility of experimental conditions , and attribution of new ideas or techniques .
we recommend that biologists approach note - taking for computational projects with the same integrity and accountability .
notes for computing can be embedded directly into most scripting language documents as comments , often designated with a hash (#) .
just as for wet - lab notebooks , graduate students and post - doctoral trainees should provide all computing notes to their research team leader when the trainee moves on to her next position .
in making recommendations for organizing bioinformatics projects , noble in 2009 considered each computational " experiment " with the same weight as a wet - lab experiment [ 1 ] , and we champion this perspective and his suggestions therein .
analysis notes document the consecutive steps taken to explore parameter space for each choice .
like wet - lab experimental notes , the motivation for each step of parameter exploration should be provided , and , afterwards , the test results should be summarized .
these notes should also document the rationales for the ultimately selected options .
we reiterate the advice of sandve [ 3 ] in taking these analysis notes , especially the need to record all versions of software and to copy lines of executed code verbatim .
we also point readers towards gentzkow et al .
[ 12 ] , who provide excellent advice for workflow documentation ( as well as advice regarding other aspects of more advanced workflow , like automation and version control ) .
we recommend maintaining and updating analysis notes in parallel with the draft of the final workflow .
there are several options for organizing computational notes , including jupyter notebooks , galaxy , arvados , and knitr for r. carl boettinger 's online lab notebook ( http :// www.carlboettiger.info / lab - notebook.html ) offers an excellent example of a well - annotated computational notebook , and there are numerous examples of reproducible academic publications ( https :// github.com / ipython / ipython / wiki / a - gallery - of - interesting - ipython - notebooks # reproducible - academic - publications ) .
examples and indexes such as these provide the community with good reference points .
while there are many excellent repositories for these resources , such as figshare , dryad , github , bitbucket , and others , discoverability of these resources remains a challenge , and work could be done to develop catalogs of exemplars .
all workflows should be maintained using version control so that changes are automatically recorded and authorship to any changes can be attributed easily .
version control is a way of automatically tracking edits to a file , and some non - programming examples include using the " track changes " option in a word processing document , or an automatic backup image of a hard drive .
in the literature , there is unwavering support for implementing version control [ 3,4,12,13 ] .
the sooner biologists become comfortable with the mechanics of version control , the simpler workflow documentation and management will be. v. shared responsibility : the team approach to reproducibility and data management we posit that integrity in computational analysis of biological data is enhanced if there is a sense of shared responsibility for ensuring reproducible workflows .
research teams that work together to develop and debug code , perform internal reproducibility checkpoints for each other , and generally hold one another accountable for high - quality results likely will enjoy a low manuscript retraction rate , high level of confidence in their results , and strong sense of collaboration .
there are several strategies for cultivating a team approach to computational analysis .
first , shared storage and workspace , such as on a cloud server or high performance computing cluster , can facilitate access to all group data .
raw files from large biological datasets can be maintained as read - only in a shared storage that can be accessed by all group members .
in this way , users will know that the data are both safe and viewable by teammates , which should increase analysis accountability and prevent misconduct in data manipulation .
second , version - controlled repository hosting services , such as github , gitlab , or bitbucket can promote teamwork by providing easy access to workflows .
research group leaders may create an " organization " for their group and allow team members access to shared repositories where they can sync , share , and track projects easily .
github , gitlab , and bitbucket also provide private repositories that can be shared with editors and reviewers of submitted manuscripts for external reproducibility checkpoints .
research group leaders can instill a sense of shared responsibility within their groups by setting expectations for frequent reproducibility checkpoints .
for instance , pis may ask trainees to demo workflows - in - progress during meetings .
another strategy that has been productive in our own experience is to host routine team " hackathons " : open - computer group meetings dedicated to analysis , including facilitating reproducibility checkpoints , sharing expertise and strategies , and collectively solving analysis hurdles .
the hackathon format brings both experienced and novice coders together , creating a shared learning experience that can be productive and motivating [ 14 ] .
research group hackathons are also excellent venues for collective exploration of parameter space .
for example , if each team member explores one option ( in a single tool ) , a team of five can collectively compare their results and complete parameter optimization for that tool in minimal time as compared to the time an individual user would require .
routine group hackathons also keep the team leader informed of and accountable for the analyses performed by their group members .
finally , routine research group hackathons can promote internal reproducibility checkpoints resulting in incremental workflow revisions , which are suggested to be effective in improving code and finding errors [ 15 ] .
journal reviewers and editors are also a crucial part of the shared responsibility equation .
they may request that code and raw data are available for review , and then also make earnest attempts to test - drive the provided workflows to ensure their integrity .
for deviations in standard methods or new workflows , reviewers should not be satisfied with a batch workflow script .
it is in the journals' and the authors' best interests to have the " guts " of the workflow examined .
reviewers should also be forthcoming with editors if they are unable to comment on the inner workings of the author - provided workflow so that editors can seek out additional reviewers that are able to provide appropriate critique .
editors may want to ask directly ( for example , using a check box on the review form ) whether reviewers attempted to reproduce the results or run the analysis code .
not all biologists have immediate colleagues who can support their computing efforts .
many trainees may be the only person computing in their research group , which can be an isolating experience involving much trial and error .
for these researchers , we suggest seeking out an intellectual community that can offer aspects of the team approach .
options include attending open office hours at the bioinformatics core or joining meetings of a computing research group on campus .
it is also possible to query or ask questions on online help forums like biostars , seqanswers , or stackoverflow ; interact with active community members on twitter or on mail lists such as r - help or bioconductor ; and follow or comment on online blogs and articles .
these activities allow biologists to engage with a virtual community of researchers and network with programmer colleagues .
tips for interacting in these forums include the following : ( 1 ) asking the proper question with as much clarity and detail as possible ; ( 2 ) before asking a question , make an honest effort to troubleshoot by conducting verbatim queries of error messages with search engines and investigating the forums for similar issues that have been previously addressed ; and ( 3 ) share code and provide a reproducible subset of the data for others to consider as they help to answer the question .
it 's easier for others to understand and help if they have an example that recreates the error .
conclusions skills in computing can enhance biologists' logic and capacity for experimental design , increase understanding and interpretation of results , and promote interdisciplinary science by building a shared vocabulary and experience with collaborators in computer science , bioinformatics , statistics , physics , and engineering .
we 've suggested a systematic roadmap for computing workflows for biologists , including considering the overarching goals of the workflow , taking an iterative approach to analysis , implementing reproducibility checkpoints , recording effective computing notes , and adopting a team approach to analysis .
ultimately , it is the responsibility of team leaders to implement policies and establish expectations for large data analysis within their groups .
large data analysis in biology requires an incredible skill set that takes time and commitment for a user to develop .
group leaders can encourage trainees to spend the productive time needed to master a workflow , and also to carefully perform the analysis and interpretation .
the more biologists trained to master basic computing , the more skilled our workforce for meeting tomorrow 's challenges in biological discovery , which , inevitably , will involve even larger datasets than we have today .
we thank colleagues for thoughtful comments on previous versions of this work .
references 1 noble ws . a quick guide to organizing computational biology projects . plos computational biology .
2009 7 ; 5 ( 7 ) : e1000424 doi : 10.1371 / journal.pcbi.1000424 19649301 2 peng rd . reproducible research in computational science . science .
2011 ; 334 : 1226 - 1227 . doi : 10.1126 / science.1213847 22144613 3 sandve gk , nekrutenko a , taylor j , hovig e . ten simple rules for reproducible computational research . plos comput biol .
2013 ; 9 : e1003285 doi : 10.1371 / journal.pcbi.1003285 24204232 4 loman n , watson m . so you want to be a computational biologist ?
nat biotechnol .
2013 ; 31 : 996 - 998 . doi : 10.1038 / nbt.2740 24213777 5 dudley jt , butte aj . a quick guide for developing effective bioinformatics programming skills . plos computational biology .
2009 12 ; 5 ( 12 ) : e1000589 doi : 10.1371 / journal.pcbi.1000589 20041221 6 wilson g , aruliah da , brown ct , chue hong np , davis m , guy rt , et al best practices for scientific computing . plos biol .
2014 ; 12 ( 1 ) : e1001745 doi : 10.1371 / journal.pbio.1001745 24415924 7 weber rjm , winder cl , larcombe ld , dunn wb , viant mr . training needs in metabolomics metabolomics .
springer us ; 2015 ; 2 - 4 . 8 teal tk , cranston k a .
, lapp h , white e , wilson g , ram k , et al data carpentry : workshops to increase data literacy for researchers . int j digit curation .
2015 ; 10 : 135 - 143 . 9 embl australia .
braembl community survey report - 2013 .
2013. http :// braembl.org.au / news / braembl - community - survey - report - 2013 10 brown ct , scott c , crusoe mr. comparing and evaluating assembly with graph alignment .
in : living in an ivory basement .
2015. cited 19 aug 2015 .
http :// ivory.idyll.org / blog / 2015 - wok - evaluate.html 11 schloss pd , gevers d , westcott sl . reducing the effects of pcr amplification and sequencing artifacts on 16s rrna - based studies . plos one .
2011 ; 6 : e27310 doi : 10.1371 / journal.pone.0027310 22194782 12 gentzkow m , shapiro jm. code and data for the social sciences : a practitioner 's guide .
2014 ; https :// people.stanford.edu / gentzkow / sites / default / files / codeanddata.xhtml 13 osborne jm , bernabeu mo , bruna m , calderhead b , cooper j , dalchau n , et al ten simple rules for effective computational research . plos comput biol .
2014 ; 10 : e1003506 doi : 10.1371 / journal.pcbi.1003506 24675742 14 moller s , afgan e , banck m , bonnal rjp , booth t , chilton j , et al community - driven development for computational biology at sprints , hackathons and codefests . bmc bioinformatics .
2014 ; 15 suppl 14 : s7 doi : 10.1186 / 1471 - 2105 - 15 - s14 - s7 25472764 15 petre m , wilson g. code review for and by scientists .
arxiv prepr arxiv14075648 .
2014 ; 4 .
http :// arxiv.org / abs / 1407.5648