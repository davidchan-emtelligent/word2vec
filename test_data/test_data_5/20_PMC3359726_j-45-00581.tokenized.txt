j appl crystallogr j appl crystallogr j. appl. cryst .
journal of applied crystallography 0021 - 8898 international union of crystallography 22675231 3359726 kk5108 10.1107 / s0021889812017293 jacgar s0021889812017293 computer programs graphical tools for macromolecular crystallography in phenix graphical tools for macromolecular crystallography in phenix echols nathaniel a * grosse - kunstleve ralf w. a afonine pavel v. a bunkoczi gabor b chen vincent b. c headd jeffrey j. a mccoy airlie j. b moriarty nigel w. a read randy j. b richardson david c. c richardson jane s. c terwilliger thomas c. d adams paul d. ae a lawrence berkeley national laboratory , one cyclotron road , mailstop 64r0246 , berkeley , ca 94720 , usa b department of haematology , university of cambridge , cambridge institute for medical research , wellcome trust / mrc building , cambridge cb2 0xy , uk c department of biochemistry , duke university medical center , durham , nc 27710 , usa d los alamos national laboratory , los alamos , nm 87545 , usa e department of bioengineering , uc berkeley , ca 94720 , usa correspondence e - mail : nechols @ lbl.gov 01 6 2012 16 5 2012 16 5 2012 45 pt 3 j120300 581 586 25 2 2012 18 4 2012 ( c ) nathaniel echols et al .
2012 2012 this is an open - access article distributed under the terms of the creative commons attribution licence , which permits unrestricted use , distribution , and reproduction in any medium , provided the original authors and source are cited.a full version of this article is available from crystallography journals online .
the foundations and current features of a widely used graphical user interface for macromolecular crystallography are described .
a new python - based graphical user interface for the phenix suite of crystallography software is described .
this interface unifies the command - line programs and their graphical displays , simplifying the development of new interfaces and avoiding duplication of function. with careful design , graphical interfaces can be displayed automatically , instead of being manually constructed .
the resulting package is easily maintained and extended as new programs are added or modified .
macromolecular crystallography graphical user interfaces phenix 1 .
introduction phenix ( adams et al. , 2010 >) is a widely used system that has been developed for crystallographic structure determination using diffraction data .
recent improvements in the experimental and computational tools available for macromolecular crystallography have led to widespread adoption of the technique by nonspecialists over the past decade , as well as a steep increase in the number of structures deposited in the protein data bank ( pdb ; bernstein et al. , 1977 > ; berman et al. , 2000 > ; berman , 2008 >) .
simultaneous efforts by structural genomics initiatives ( see for example cymborowski et al. , 2010 > ; elsliger et al. , 2010 >) and the biotechnology and pharmaceutical industries have focused on high - throughput technologies , with the goal of rapid structure solution .
rapid structure solution often requires a combination of many approaches , such as parallel testing of phasing strategies or quick evaluation of multiple related data sets of unknown quality .
this can be accomplished by using a high degree of automation , both increasing the probability of successfully solving and refining structures , and avoiding burdening the crystallographer with repetitive time - consuming tasks .
a large number of systems for running part or all of the computational ' pipeline ' nearly unattended have been proposed , many focused around linking together existing components with command - line scripts or html interfaces ( brunzelle et al. , 2003 > ; holton & alber , 2004 > ; kroemer et al. , 2004 > ; panjikar et al. , 2005 > ; vonrhein et al. , 2007 >) .
in favorable cases , a mostly complete model can be obtained starting from raw diffraction images or processed data ; however , additional correction and completion by experts is almost always necessary , and automation may fail for more difficult structures .
in many respects a graphical user interface ( gui ) is highly suitable as an automation platform , especially for novice users who face a steep learning curve when using software that implements a large number of complex algorithms .
presentation in a gui can be used to separate commonly used parameters from advanced options and provide additional information about their intended use .
additionally , a gui can provide a framework for tracking information about individual projects , rather than relying on the native file system and text files ; it can also facilitate automation , for example by suggesting or easing transitions between programs , or promoting re - use of common parameter sets and other input files .
finally , much of the information generated by crystallography software can be difficult to interpret when presented as plain text files .
in many cases presentation as two - dimensional graphs or three - dimensional models and maps greatly simplifies the process .
most of the current generation of graphical interfaces have focused on making the individual steps as accessible as possible and linking them together , rather than imposing ' black - box ' automation on the user ( potterton et al. , 2003 > ; pape & schneider , 2004 > ; minor et al. , 2006 > ; emsley et al. , 2010 >) .
we have implemented a graphical interface to phenix designed around a similar concept , using a novel parameter syntax suitable as a basis for both command - line tools and the gui .
the new gui provides access to nearly all of the command - line features of phenix , making it suitable for experts as well as users with a less technical background .
2. methods 2.1 .
the phenix software development environment 2.1.1 .
programming languages when building a complex large - scale system the choice of fundamental tools is critical .
clearly the most important choice of all is the choice of programming languages .
for phenix a combination of python ( van rossum & drake , 2003 >) and c ++ ( stroustrup , 2000 >) is used ( grosse - kunstleve et al. , 2002 > ; adams et al. , 2010 >) .
this decision was motivated by a number of considerations .
firstly , python and c ++ are simultaneously compatible and complementary : compatible because both languages are object oriented , complementary because python maximizes programmer productivity while c ++ maximizes runtime efficiency .
secondly , both languages are in wide use in the software development world , including many open - source projects .
therefore this makes accessible a vast and still growing pool of widely used and well maintained libraries .
thirdly , both languages are highly portable and are almost certain to remain so in the future because of the strong community interest in supporting new platforms for the many existing packages based on python and c ++ .
the integration between python and c ++ uses the boost.python library ( abrahams & grosse - kunstleve , 2003 >) to implement python interfaces for the c ++ components of phenix .
boost.python uses the c ++ template engine to generate c ++/ python bindings , which has the two important advantages that no additional tools are needed and that the syntax for defining the bindings is standard c ++ .
this contrasts with other widely used tools ( most notably swig ; http :// swig.org ) thereby maximizing portability and sparing new methods developers the effort of learning a third syntax .
2.1.2 .
the gui toolkit the second fundamental decision is the choice of gui toolkit .
we determined that a python interface is highly suitable , for two main reasons .
the first is that python maximizes programmer productivity , the second that the core algorithms of phenix are almost universally called through python interfaces ( grosse - kunstleve et al. , 2002 >) .
we also determined that the gui toolkit must offer cross - platform support for all major features and that it should be backed by a major existing user community , because this is correlated with long - term availability .
finally , to be compatible with the distribution model of phenix , it is important that the gui toolkit is open source .
after a thorough evaluation the wxpython toolkit ( http :// wxpython.org ) was chosen as the best match for these requirements .
2.1.3 .
a unifying user interface toolkit ( phil ) the third fundamental component behind the phenix gui is the python - based hierarchical interchange language ( phil ; http :// cctbx.sourceforge.net / libtbx _ phil.html ) , which was developed as part of the phenix project ( grosse - kunstleve et al. , 2005 >) .
phil is designed to simultaneously enable intuitive command - line user interfaces and aid in largely automating the generation of graphical user interfaces .
phenix command - line users are presented with a minimal but powerful syntax for defining input parameters ; the only two major syntax elements are the equal sign for keyword - value assignments and curly braces for the delineation of a hierarchical structure .
for methods developers , phil provides flexible means for the modular assembly of parameter files .
the phil modules are typically implemented along with the algorithms using the parameters .
phil supports embedded help text for users .
typically the algorithms and the phil modules including the help text are kept in the same python source code file .
this arrangement ensures that the algorithms , associated parameters and help texts can easily be developed and maintained together and are approachable by new methods developers .
phil parameter files can be automatically converted to a graphical presentation .
this makes use of metadata embedded in the phil modules , primarily the type for each parameter ( for example int , float , choice , path etc. ) , which is defined by the developer .
for each type there is a corresponding default presentation in the gui .
optionally , the type information is augmented by secondary information defined by the developer , to direct customized presentation in the gui .
a typical example is shown in figs. 1 >( a ) and 1 >( b ) .
nearly all of the information required to create and manage the graphical controls for editing these parameters is contained in the metadata .
the hierarchical organization of the phil parameters helps determine the window layout .
developers may modify most of the options for underlying programs without disrupting the gui .
the user - modified parameters are retrieved from the gui by forming new internal phil objects , which may be saved as input files for the command - line programs or used directly to start computational processes .
advanced users may opt to edit the phil files prior to executing the processes .
the need for repetitive input is reduced both by the ability to restore and merge past inputs and by the option of saving default settings for specific contexts .
each phil parameter definition or hierarchical level is tagged with an ' expert level ' attribute , which allows the display in the gui to be limited to basic settings or increasing levels of complexity .
because many of the settings are distracting for novices or used primarily for development purposes , the default interface is kept simple , and a minimal set of controls is displayed in the main window .
the phil implementation is intended to be reusable for a wide variety of purposes .
to this end , the phil type system is designed to be extensible from python .
for example , the extension mechanism is used to support crystallography - specific types , most notably unit - cell and space - group types .
these accommodate common abbreviations and syntactical variations .
for example , the space - group symbols ' p212121 ' or ' 19 ' are converted to the standardized form ' p 21 21 21 ' .
2.2 .
execution of programs the phenix software development framework allows any program to be run within the gui as a python module .
this enables immediate feedback , such as real - time plots or progress bars .
for maximum flexibility , however , several additional approaches to starting processes have been implemented .
programs may be started either directly from the gui , as separate processes on the same computer , or on a cluster managed by a batch queuing system ( for example the sun grid engine or the portable batch system ) .
the latter two mechanisms allow the gui to be closed ( and resumed later ) without interrupting running processes , at the cost of losing some interactive features that require direct communication between the gui and running process .
in all cases , the printed console output is automatically propagated to the gui .
more complex output is sent to the gui on a case - by - case basis using ' callbacks ' , which encapsulate intermediate data to be saved to temporary files or sent directly via interprocess - communication objects .
information sent to the gui by this mechanism may include warning messages , tables of statistics , plot data , or even models and maps .
the ability to propagate higher - level data to the gui makes it possible to provide fine - grained indicators of program progress using easily interpretable presentations instead of relying on the text output alone .
2.3 .
testing an essential feature of collaborative development , or any long - term software project , is frequent testing of all basic functionality to guard against bugs introduced by code changes .
in the context of phenix and the cctbx ( adams et al. , 2010 >) , this is primarily accomplished by running nightly builds and a set of regression tests on all supported platforms .
automated testing of graphical code is notoriously difficult because of the interactive nature of the software .
however , careful separation of core logic and presentation allows the nongraphical components to be tested as part of a nightly build system .
this includes consistency checks to ensure that none of the parameters represented in the gui have been removed from the underlying program .
graphical controls are implemented as separate modules with minimal dependencies where possible , which makes them potentially reusable for other purposes and less prone to errors as a result of changes to other code .
each control includes a simple test program that can be run manually as a standalone command , allowing quick verification of code changes without the burden of running the entire application .
3. results and discussion 3.1 .
overview of the phenix gui as of the current release ( 1.7.3 , december 2011 ) , most of the major programs in phenix are available in the gui , including phenix.refine ( afonine et al. , 2012 >) , the autosol , autobuild , automr and ligandfit wizards ( terwilliger et al. , 2006 > , 2008 > , 2009 >) , phaser ( mccoy et al. , 2007 >) , xtriage ( zwart et al. , 2005 >) , elbow ( moriarty et al. , 2009 >) , mr - rosetta ( dimaio et al. , 2011 >) , a comprehensive validation suite largely derived from molprobity ( chen et al. , 2010 >) , polygon ( urzhumtseva et al. , 2009 >) , and phenix.model _ vs _ data ( afonine et al. , 2010 >) , as well as many simpler programs for building , map calculations , restraints editing , file manipulation , data analysis and visualization .
nearly all of the programs in phenix are now configurable by phil ; in those cases where the original code was designed around this framework ( such as phenix.refine and xtriage ) , few modifications other than addition of gui - specific metadata were required .
for applications that pre - date phil , such as the wizards and elbow , additional wrapper code was required to provide an interface between phil and the configuration mechanism used internally .
in the case of phaser , an entirely new command - line interface was added as a bridge between the phil layer and the existing python api ( mccoy et al. , 2007 >) .
the phil - based system has proved essential for maintaining the interfaces to applications such as phenix.refine , which currently has more than 900 unique parameters .
most changes to parameters can automatically be propagated to the phenix gui , and most customizations are made in the phil metadata rather than python code .
for particularly complicated input types ( especially file input ) , embedded keywords may specify callback functions to be executed when a parameter is changed .
some common parameters that use the basic types often have additional restrictions on syntax and may be tightly coupled to other parameters , such as the selection of column labels ( as comma - separated strings ) from reflection data files ; these are flagged by style keywords in the phil syntax and handled by specialized controls .
additional customization of individual applications is often inevitable , and nearly all interfaces contain some custom layout code for the top - level controls .
however , for simple programs an entirely automatic interface is possible ( fig. 1 > c ) , and even the most complex interface , that for phenix.refine , presents more than 90 % of parameters without any customization .
the organization of the central gui ( the ' phenix ' command ) combines a list of user - defined projects and their current status with individual programs grouped by category ( fig. 2 >) .
internally , phil is also used to define much of the information about available programs , such as module locations and the content displayed in the widgets in the main gui .
on the macintosh platform , help links embedded in the phil specification are used to generate buttons to navigate directly to the html documentation from anywhere in the gui .
phil is also the primary storage format for project tracking .
job history for the currently selected project is displayed in a separate window ( reached through the ' job history ' tab ) .
both jobs and projects can be sorted on the basis of modification time or current best r free ( brunger , 1992 >) ( extracted at the end of each job if it is calculated ) .
currently job tracking is the primary function of projects , but this functionality will be extended in the future to manage default settings and inputs .
for demonstration purposes , phenix is distributed with a number of tutorial data sets , which can be readily set up as projects directly from the gui .
although they share a common configuration system , the output of the individual programs is heterogeneous , and a variety of mechanisms have been implemented to present the progress and results of each application visually .
larger programs such as phenix.refine send entire molecules and maps via callbacks as they are updated , and this output is displayed in graphics programs such as coot ( emsley et al. , 2010 >) ( see below ) .
final results may encompass validation reports , models , tables for plotting and any information written to files .
these results ( and any intermediate results from callbacks ) are saved to disk and can be quickly reloaded and displayed in the gui in future sessions .
for many programs , the final result returned is a simple list of files created , which can be automatically displayed using a generic procedure .
the heterogeneous nature of the large programs and the complexity of the information returned requires the use of manual layout for many results , although re - use of common classes is made wherever possible .
3.2 .
interfacing with molecular graphics the phenix gui includes basic three - dimensional graphics functionality , for example the ability to display wireframe atomic models and electron density maps .
however , manual model building or publication - quality graphics are outside the scope of the phenix project .
therefore , we have implemented interface layers for the crystallographic building program coot and the general - purpose molecular graphics program pymol ( delano , 2002 >) .
both programs are extensible from python .
most of the communication is through files [ pdb , mtz or ccp4 ( collaborative computational project , number 4 , 1994 >)] , but a local network connection is used internally , allowing functions in the coot and pymol python apis ( for instance , loading and contouring a map file ) to be called remotely from within phenix .
interactive model validation summaries (' kinemages ') may also be loaded in king ( chen et al. , 2009 >) , providing visual validation similar to that available in molprobity .
all applications in the gui support the loading of data files directly into coot , and the majority also support pymol and / or the built - in graphical viewer .
any necessary file conversions or additional commands , such as a fast fourier transform to generate a ccp4 - formatted map file , are handled internally .
thus , the final model and map coefficients from refinement can be opened in coot or pymol by a simple mouse click in the phenix gui , and pdb files used for input may be opened in one of the viewers instead of a text editor .
a more powerful application of the graphics extensions is continuous display of results during computation , by saving intermediate data and re - loading the files as they change .
similar interactivity has previously been implemented in vmd ( visual molecular dynamics ; humphrey et al. , 1996 >) , both for visualizing molecular dynamics simulations and for nmr refinement ( schwieters & clore , 2001 >) , and applied to visualizing the progress of the building program arp / warp ( payne et al. , 2005 > ; langer et al. , 2008 >) .
this is most useful in refinement where one can watch model and map changes in real time .
other programs that iteratively rebuild models ( currently autosol and autobuild ) produce similar output at longer intervals .
for applications requiring a particularly high degree of interactivity and two - way communication , extending the coot gui via the coot python api is necessary .
this approach has been used to facilitate editing of input models for molecular replacement with the sculptor utility ( bunkoczi & read , 2011 >) .
in most situations , however , it has been sufficient to use a direct network connection instead .
when displaying validation results , therefore , instead of creating a redundant interface in coot to list outliers , the list controls in phenix re - center the attached coot window on the selected residue ( fig. 3 >) .
controlling phenix from coot via the same mechanism is also possible .
currently this is limited to starting the phenix.refine gui and loading a selected model , but more complex operations such as atom picking or selecting from a choice of automatically fitted loops could be added .
3.3 .
automation in a gui framework although the new phenix gui has been designed around individual programs , many of the most common automation strategies for phasing and model building are implemented in the wizards ( terwilliger et al. , 2006 > , 2008 > , 2009 >) .
the gui provides a framework for further simplifying the process , primarily by linking related actions and easing the transition between programs .
in the interface for phenix.refine , for instance , common tasks such as setting up restraints and adding hydrogen or deuterium atoms ( via the phenix.ready _ set program ) , identification of noncrystallographic symmetry ( ncs ) groups ( phenix.simple _ ncs _ from _ pdb ) , rapid identification of translation / libration / screw ( tls ) groups ( phenix.find _ tls ) , and assigning secondary structure for the purpose of generating hydrogen - bond restraints ( phenix.secondary _ structure _ restraints ) are easily accessed and the results incorporated into the refinement input .
at the end of each run , the validation suite is automatically executed and the results displayed with refinement statistics ( fig. 3 >) .
a simpler , but extremely important , type of automation is for programs to suggest appropriate next steps after a job is complete , and provide an easy and direct transition to other programs .
for example , the wizard guis display buttons for launching phenix.refine with input fields filled in with data calculated by the wizard , and for running other wizards where appropriate .
this allows new ' pipelines' to be constructed by chaining of gui modules instead of integrating programs at a lower level , such as molecular replacement single - wavelength anomalous diffraction ( mr - sad ) phasing , which is performed in phenix simply by running the molecular replacement gui , then clicking a button labeled ' run mr - sad ' to launch a separate wizard with the required inputs .
future developments will address common parallel workflows , such as evaluating multiple molecular replacement search models , or validating several closely related structures simultaneously .
4. conclusions and future directions the combination of python and the phil configuration system has proved to be a highly productive environment for efficiently developing graphical interfaces , which greatly increase the accessibility of phenix to the broader community of structural biologists .
new interfaces are added regularly , and because configurable parameters are now usually designed with gui considerations in mind , their implementation typically requires only a small effort relative to the effort invested in developing the core algorithms .
the integration with coot and pymol provides a nearly seamless workflow for all aspects of structure determination and refinement starting from processed data , without requiring knowledge of the phenix command - line tools .
this allows the training of researchers to focus on general principles and best practices , rather than advanced computer skills .
as development of phenix and the gui continues , the underlying framework is constantly revised to improve modularity and enable more comprehensive unit testing .
lightweight applications using phil can often be integrated into the phenix gui without specialized python code , and a growing set of utilities now uses this approach .
eventually the core gui libraries will be extended to serve as a general - purpose framework for developing graphical tools built around the cctbx , incorporating related programs such as labelit ( sauter et al. , 2004 >) .
5. availability the gui is distributed as part of the phenix suite , which is freely available to academic users , both as binaries for standard macintosh and linux platforms and as source code .
phenix can be obtained from http :// www.phenix - online.org after online registration .
the phil implementation and many of the low - level graphical controls , toolkits and libraries are also available as part of the open - source cctbx project ( http :// cctbx.sourceforge.net ) .
luc bourhis made many important contributions to the cctbx , including code for displaying electron density and anisotropic ellipsoids .
alexandre urzhumtsev developed the polygon concept used in validation .
many users and collaborators provided essential feedback and ideas during the development of phenix , especially james fraser , herb klei , frank von delft , joel bard , engin ozkan , felix frolow and robert nolte .
paul emsley , bernhard lokhamp and william scott assisted with coot integration and support , and robin dunn contributed advice on wxpython development .
we are indebted to the late warren delano for pymol support and advice throughout the course of the phenix project .
funding was provided by the nih ( grant no. gm063210 ) and the phenix industrial consortium .
references abrahams , d .
& grosse - kunstleve , r. w. ( 2003 ) .
c / c ++ users j .
21 , 29 - 36.adams , p. d. et al .
( 2010 ) .
acta cryst .
d66 , 213 - 221.afonine , p. v. , grosse - kunstleve , r. w. , chen , v. b. , headd , j. j. , moriarty , n. w. , richardson , j. s. , richardson , d. c. , urzhumtsev , a. , zwart , p. h. & adams , p. d. ( 2010 ). j. appl. cryst .
43 , 669 - 676.afonine , p. v. , grosse - kunstleve , r. w. , echols , n. , headd , j. j. , moriarty , n. w. , mustyakimov , m. w. , terwilliger , t. c. , urzhumtsev , a. , zwart , p. h. & adams , p. d. ( 2012 ) .
acta cryst .
d68 , 352 - 367.berman , h. m. ( 2008 ) .
acta cryst .
a64 , 88 - 95.berman , h. m. , westbrook , j. , feng , z. , gilliland , g. , bhat , t. n. , weissig , h. , shindyalov , i. n. & bourne , p. e. ( 2000 ) .
nucleic acids res .
28 , 235 - 242.bernstein , f. c. , koetzle , t. f. , williams , g. j. , meyer , e. f. , brice , m. d. , rodgers , j. r. , kennard , o. , shimanouchi , t .
& tasumi , m .
( 1977 ). j. mol. biol .
112 , 535 - 542.brunger , a. t. ( 1992 ) .
nature ( london ) , 355 , 472 - 475.brunzelle , j. s. , shafaee , p. , yang , x. , weigand , s. , ren , z .
& anderson , w. f. ( 2003 ) .
acta cryst .
d59 , 1138 - 1144.bunkoczi , g .
& read , r. j. ( 2011 ) .
acta cryst .
d67 , 303 - 312.chen , v. b. , arendall , w. b. , headd , j. j. , keedy , d. a. , immormino , r. m. , kapral , g. j. , murray , l. w. , richardson , j. s. & richardson , d. c. ( 2010 ) .
acta cryst .
d66 , 12 - 21.chen , v. b. , davis , i. w. & richardson , d. c. ( 2009 ) .
protein sci. 18 , 2403 - 2409.collaborative computational project , number 4 ( 1994 ) .
acta cryst .
d50 , 760 - 763.cymborowski , m. , klimecka , m. , chruszcz , m. , zimmerman , m. d. , shumilin , i. a. , borek , d. , lazarski , k. , joachimiak , a. , otwinowski , z. , anderson , w .
& minor , w .
( 2010 ). j. struct. funct .
genomics , 11 , 211 - 221.delano , w. l. ( 2002 ) .
the pymol molecular graphics system .
schrodinger , llc , http :// www.pymol.org /. dimaio , f. , terwilliger , t. c. , read , r. j. , wlodawer , a. , oberdorfer , g. , wagner , u. , valkov , e. , alon , a. , fass , d. , axelrod , h. l. , das , d. , vorobiev , s. m. , iwai , h. , pokkuluri , p. r. & baker , d .
( 2011 ) .
nature ( london ) , 473 , 540 - 543.elsliger , m .
- a. , deacon , a. m. , godzik , a. , lesley , s. a. , wooley , j. , wuthrich , k .
& wilson , i. a. ( 2010 ) .
acta cryst .
f66 , 1137 - 1142.emsley , p. , lohkamp , b. , scott , w. g. & cowtan , k .
( 2010 ) .
acta cryst .
d66 , 486 - 501.grosse - kunstleve , r. w. , afonine , p. , sauter , n. k. & adams , p. d. ( 2005 ) .
iucr commission on crystallographic computing newsletter , no .
5 , pp .
69 - 91.grosse - kunstleve , r. w. , sauter , n. k. , moriarty , n. w. & adams , p. d. ( 2002 ). j. appl. cryst .
35 , 126 - 136.holton , j .
& alber , t .
( 2004 ). proc .
natl acad. sci. usa , 101 , 1537 - 1542.humphrey , w. , dalke , a .
& schulten , k .
( 1996 ). j. mol. graph .
14 , 27 - 38.kroemer , m. , dreyer , m. k. & wendt , k. u. ( 2004 ) .
acta cryst .
d60 , 1679 - 1682.langer , g. , cohen , s. x. , lamzin , v. s. & perrakis , a .
( 2008 ). nat. protoc .
3 , 1171 - 1179.mccoy , a. j. , grosse - kunstleve , r. w. , adams , p. d. , winn , m. d. , storoni , l. c. & read , r. j. ( 2007 ). j. appl. cryst .
40 , 658 - 674.minor , w. , cymborowski , m. , otwinowski , z .
& chruszcz , m .
( 2006 ) .
acta cryst .
d62 , 859 - 866.moriarty , n. w. , grosse - kunstleve , r. w. & adams , p. d. ( 2009 ) .
acta cryst .
d65 , 1074 - 1080.panjikar , s. , parthasarathy , v. , lamzin , v. s. , weiss , m. s. & tucker , p. a. ( 2005 ) .
acta cryst .
d61 , 449 - 457.pape , t .
& schneider , t. r. ( 2004 ). j. appl. cryst .
37 , 843 - 844.payne , b. r. , owen , g. s. & weber , i .
( 2005 ) .
computational science - iccs 2005 , 5th international conference , atlanta , ga , usa , may 22 - 25 , 2005 , proceedings , part i , lecture notes in computer science vol. 3514 , pp .
451 - 459 .
berlin , heidelberg : springer.potterton , e. , briggs , p. , turkenburg , m .
& dodson , e .
( 2003 ) .
acta cryst .
d59 , 1131 - 1137.sauter , n. k. , grosse - kunstleve , r. w. & adams , p. d. ( 2004 ). j. appl. cryst .
37 , 399 - 409.schwieters , c. d. & clore , g. m. ( 2001 ). j. magn. reson .
149 , 239 - 244.stroustrup , b .
( 2000 ) .
the c ++ programming language .
indianapolis : addison wesley.terwilliger , t. c. , adams , p. d. , read , r. j. , mccoy , a. j. , moriarty , n. w. , grosse - kunstleve , r. w. , afonine , p. v. , zwart , p. h. & hung , l .
- w .
( 2009 ) .
acta cryst .
d65 , 582 - 601.terwilliger , t. c. , grosse - kunstleve , r. w. , afonine , p. v. , moriarty , n. w. , zwart , p. h. , hung , l .
- w. , read , r. j. & adams , p. d. ( 2008 ) .
acta cryst .
d64 , 61 - 69.terwilliger , t. c. , klei , h. , adams , p. d. , moriarty , n. w. & cohn , j. d. ( 2006 ) .
acta cryst .
d62 , 915 - 922.urzhumtseva , l. , afonine , p. v. , adams , p. d. & urzhumtsev , a .
( 2009 ) .
acta cryst .
d65 , 297 - 300.van rossum , g .
& drake , f. l. ( 2003 ) .
an introduction to python bristol : network theory ltd.vonrhein , c. , blanc , e. , roversi , p .
& bricogne , g .
( 2007 ) .
methods mol. biol .
364 , 215 - 230.word , j. m. , lovell , s. c. , labean , t. h. , taylor , h. c. , zalis , m. e. , presley , b. k. , richardson , j. s. & richardson , d. c. ( 1999 ). j. mol. biol .
285 , 1711 - 1733.zwart , p. , grosse - kunstleve , r. w. & adams , p. d. ( 2005 ) .
ccp4 newsletter on protein crystallography , no .
43. figure 1 ( a ) example of phenix.refine parameter specifications using the libtbx.phil module in cctbx , with metadata used in the gui .
( b ) controls drawn automatically based on the specifications in ( a ) .
( c ) a practical example of fully automatic interface generation : pdb file preparation for refinement in phenix.ready _ set .
figure 2 screen capture of the main window of the phenix gui running on a macintosh computer .
figure 3 integrated validation application , showing a list of outliers for all - atom contact analysis , and the multi - criterion plot combining geometry outliers , electron - density levels and b factors .
the model , maps and probe dots ( word et al. , 1999 >) are automatically loaded into coot , and the view is re - centered on the selected atom .