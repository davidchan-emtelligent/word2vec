plos comput biol plos comput .
biol plos ploscomp plos computational biology 1553 - 734x 1553 - 7358 public library of science san francisco , usa 23236269 3516539 pcompbiol - d - 12 - 01659 10.1371 / journal.pcbi.1002802 editorialbiologycomputational biology ten simple rules for the open development of scientific software prlic andreas 1 * procter james b .
2 1 san diego supercomputer center , university of california san diego , la jolla , california , united states of america 2 school of life sciences research , college of life sciences , university of dundee , dundee , scotland , united kingdom * e - mail : andreas.prlic @ gmail.com the authors have declared that no competing interests exist .
andreas prlic is a software editor for plos computational biology .
12 2012 6 12 2012 8 12 e1002802 ( c ) 2012 prlic , procter 2012 prlic , procterthis is an open - access article distributed under the terms of the creative commons attribution license , which permits unrestricted use , distribution , and reproduction in any medium , provided the original author and source are properly credited.the authors received no specific funding for writing this article .
open - source software development has had significant impact , not only on society , but also on scientific research .
papers describing software published as open source are amongst the most widely cited publications ( e.g. , blast [ 1 ] , [ 2 ] and clustal - w [ 3 ]) , suggesting many scientific studies may not have been possible without some kind of open software to collect observations , analyze data , or present results .
it is surprising , therefore , that so few papers are accompanied by open software , given the benefits that this may bring .
publication of the source code you write not only can increase your impact [ 4 ] , but also is essential if others are to be able to reproduce your results .
reproducibility is a tenet of computational science [ 5 ] , and critical for pipelines employed in data - driven biological research .
publishing the source for the software you created as well as input data and results allows others to better understand your methodology , and why it produces , or fails to produce , expected results .
public release might not always be possible , perhaps due to intellectual property policies at your or your collaborators' institutes ; and it is important to make sure you know the regulations that apply to you .
open licensing models can be incredibly flexible and do not always prevent commercial software release [ 5 ] .
simply releasing the source under an open license , however , is not sufficient if you wish your code to remain useful beyond its publication [ 6 ] .
the sustainability of software after publication is probably the biggest problem faced by researchers who develop it , and it is here that participating in open development from the outset can make the biggest impact .
grant - based funding is often exhausted shortly after new software is released , and without support , in - house maintenance of the software and the systems it depends on becomes a struggle .
as a consequence , the software will cease to work or become unavailable for download fairly quickly [ 7 ] , which may contravene archival policies stipulated by your journal or funding body .
a collaborative and open project allows you to spread the resource and maintenance load to minimize these risks , and significantly contributes to the sustainability of your software .
if you have the choice , embracing an open approach to development has tremendous benefits .
it allows you to build on the work of other scientists , and enables others to build on your own efforts .
to make the development of open scientific software more rewarding and the experience of using software more positive , the following ten rules are intended to serve as a guide for any computational scientist .
rule 1 : do n't reinvent the wheel as in any other field , you should do some research before starting a new programming project to find out if aspects of your problem have already been solved .
many fundamental scientific algorithms and methods have already been implemented in open - source libraries , and having the source means you can easily evaluate if they will work in your situation .
you can also contact online communities ( see [ 8 ]) to find out about their experiences with existing approaches , and if none are appropriate , any new implementation you provide will be well received , however modest .
providing another solution to a problem , even if technologically novel , is only an accomplishment in engineering and rarely suitable for publication on its own .
however , if it is useful it can benefit everyone , even if it addresses a mundane task .
furthermore , when there are no existing implementations for your platform , or they cannot cope with the size , complexity , or other specifics of your data , then new approaches may be required that lead to new science .
rule 2 : code well if you do n't know them already , learn the basics of software development [ 9 ] , [ 10 ] .
you do n't need to be the best software developer in the world , but try to be inspired by them .
study other people 's code and learn by practice .
join an existing open - source project .
there are plenty to choose from ( most open - source repositories have a " biology " or " bioinformatics " project tag ) , but the " bio - *" projects hosted at the open bioinformatics foundation are a good place to start [ 11 ] - [ 14 ] .
once you identify a weakness ( and you will !) or something that does not work as expected , fix the issue so it works for yourself and provide a patch back to the original authors .
getting familiar with other people 's code in this way is a great way to boost your experience and learn new techniques .
rule 3 : be your own user one of the more graphic mottos in the open - source community is " eat your own dog food " .
for a researcher this has two implications .
if you are developing software of value to your field , it is important that you demonstrate that it can address important questions in a useful or novel way .
the second implication is that your software should be useful to other developers , and is not simply a demonstration of the solution .
sadly , for some scientific software articles this is often not the case , and there are examples of software that - - whilst novel - - were not developed to solve a problem the scientists faced in a practical situation .
problems to do with how software is structured or functions in a variety of situations are difficult to detect during peer review .
it is only later , when a researcher discovers and applies the software during their research , that these issues hinder or obstruct progress .
avoiding wasted effort of this kind is critical to researchers , who have limited time and require high levels of quality and reproducibility from scientific source code. by being " your own best user " many such problems will be detected before they become public .
rule 4 : be transparent scientific software , like other competitive activities , is often at first developed behind closed doors instead of out in the open , and public release is then only considered around the time of publication .
the first reason given for this ( after any legal constraints ) , is the fear of getting scooped - - that somebody else might use the ideas to produce competing software faster or tackle the same research problem first .
in our experience , however , open development often results in just the opposite .
founding or contributing new code to open - source projects is one way for a researcher to stake a claim in a field [ 15 ] .
people with similar or related research interests who discover the project will find that they have more to gain from collaborating than from competing with the original developers .
the second reason given for closed development is the perhaps more serious risk that code released prematurely may lead to incorrect findings by others .
however , examples regularly show [ 16 ] that even prior publication of software in a peer - reviewed journal does not preclude the presence of serious bugs .
one consequence of transparent , open development is that it allows many eyes to evaluate the code and recognize and fix any issues , which reduces the likelihood of serious errors in the final product .
there are public repositories such as sourceforge or github that greatly facilitate this kind of team development approach .
they provide free services such as version control , wikis , mailing lists , and bug trackers and support communication with your collaborators to share effort , document bugs , and solve problems more quickly [ 17 ] .
several models for initiating and managing open development have also been proposed and advocated by different communities , such as the apache way [ 18 ] , [ 19 ] .
rule 5 : be simple science is hard enough already .
if your software is too complex to obtain and operate or can only run on one platform , then few people will bother to try it out , and even fewer will use it successfully ( particularly your reviewers !) .
this is doubly important for open projects , since difficult compilation or installation processes will raise a barrier against participation .
documentation helps a lot , in the form of build and installation instructions , user manuals , or even video demonstrations , but simplicity is key , since potential users will first evaluate how long it will take to install and get something out of your software against the time it will take them to find another way .
employ standard package or software installation models for as many platforms as possible .
practically all operating systems , and many languages ( e.g. , perl , ruby , and python ) , have standard models for creating installable software packages , which allow you to specify any other software your code needs to run , and make it easier for you to distribute it [ 20 ] .
if you do n't have the time to learn how to create an installation package yourself , then get in contact with one of the many open - source packaging communities ( e.g. , debianmed ) , and ask for help .
when creating new software , try to support standard file formats and do n't come up with new , custom formats .
this can make your software less appealing .
spending time to create online documentation , sample data files , and test cases will give others an easy start into your codebase .
rule 6 : do n't be a perfectionist do n't wait too long with getting the first version of your source code out into the public and do n't worry too much if your first prototypes still have critical features missing .
if your idea is innovative , others will understand the concept .
moreover , as scientists , we are trained to constantly assess and revise our own and each others' hypotheses , and we should do the same for our software .
" release early , release often " is regarded as an open - source mantra , and attributed to linus torvalds by eric raymond [ 21 ] .
it advocates the practice of releasing as soon as new work has been done , because your " customers " will quickly identify problems and new requirements , and you will be able to fix them more quickly if you avoid sitting on and polishing new code for several months before letting it into the wild .
agile development practices [ 22 ] , which have become popular in the last decade , embody this iterative development process .
rule 7 : nurture and grow your community the biggest advantage of open development is that it allows users and developers to freely interact and form communities , and if your software is useful , your user base will grow .
you can only do so much by yourself , but if you form a team ( see [ 23 ]) and communicate with the people who use your tool , then new scientific and technical collaborations can arise .
reciprocity is essential , however : as a user of open source , acknowledge the tools you are using .
if you are running your own open community , acknowledge the contributions of each person to your project .
make it easy for others to contribute ideas and act on feedback .
seeing that suggestions are being taken seriously and acted upon can be highly motivating and will encourage further involvement .
try to avoid changing key aspects of your code that other people 's software or analysis pipelines might depend on , such as file formats , command line arguments , or application programming interfaces ( apis ) .
if you do , discuss them online first , then document and create demonstrations of the changes , and assign a version number to the api .
even better , use semantic versioning ( http :// semver.org ) , which communicates both api and software version compatibility between releases .
above all , avoid confusing your users - - drastic differences between each release that introduce incompatibilities will win no friends .
rule 8 : promote your project in order to attract more attention to your project , it is important to spend time promoting it. appearance matters , and a clean , well - organized website that will help your cause is not hard to achieve .
hosting sites such as github or google code provide standard templates for project websites , where you only need to come up with a name and logo .
branding is not rocket science , but it is about habit - - once you have a name , stick with it , and use it everywhere .
create personae for your project on social networks that people can connect to , and increase your presence in online discussion forums : answer questions on researchgate , linkedin , or any of the other open communities where potential users of your software might be. whilst doing this , bear in mind that regardless of how good your project is , people are more likely to connect with your project because of what you say and your own personal profile .
finally , remember about more traditional ways of communicating your work : go to conferences where you will meet other developers and potential users of your software , and give as many presentations as you can .
keep an eye out for ad hoc developer meetups and hackathons , where open - source coders get together to work on one , or many different projects .
promotion is hard work , but through it you will grow and strengthen your community .
rule 9 : find sponsors no matter how large the community around your project and how efficiently it is developed and managed , some level of funding is essential .
scientific software can be successfully supported through grants , by writing applications to address new scientific problems through the development and use of software , or attaching development and upkeep of software as a deliverable on experimental grants .
grant writing [ 24 ] is beyond the scope of the ten simple rules presented here , but it is worth mentioning that if the rules laid out here are being followed , an open development community can ensure value beyond the lifetime of an award .
open development directly addresses the section on sustainability in grant applications , but the emphasis here has to be on the community .
simply releasing code openly , without support and maintenance , will not ensure extended value ; instead , you need to explain how you will actively foster your community of users and developers .
besides grants , there are also other support models for open source .
internship programs like the google summer of code finance students to spend a summer working on open - source projects , and a number of projects related to science have benefited from them .
rule 10 : science counts as scientists , the software we write is primarily a means to advance our research and , ultimately , achieve our scientific goals .
whilst the development of software for the consumption of others aligns well with other processes of scientific advancement , it is the science that ultimately counts .
scientific software development fulfils an immediate need , but maintenance of code that is no longer relevant to your own research is a serious time sink , and will rarely lead to your next paper , or secure your next grant or position .
open - source development and maintenance is an intensely social process , and perhaps particularly appealing to scientists since we tend to crave interaction with others as knowledgeable about our fields as ourselves .
these aspects of open source make it even more important for us as scientists to keep an eye on the big picture , and stay true to our scientific goals .
however , if done right , you can publish both the science and the software for the same project , giving credit to everyone involved .
open - source communities ensure persistence of projects by allowing project leadership to be shared and passed to other members .
as a scientist , this offers you the opportunity to naturally progress to new challenges with the knowledge that the software you created will remain available and benefit others .
we want to thank hilmar lapp for his comments and contributions to parts of the text .
thanks to scott markel , fran lewitter , and spencer bliven for their comments and feedback .
references 1 altschul sf , gish w , miller w , myers ew , lipman dj ( 1990 ) basic local alignment search tool . j mol biol 215 : 403 - 410 http :// dx.doi.org / 10.1016 / s0022 - 2836 ( 05 ) 80360 - 2 2231712 2 altschul sf , madden tl , schaffer aa , zhang j , zhang z , et al ( 1997 ) gapped blast and psi - blast : a new generation of protein database search programs . nucleic acids res 25 : 3389 - 3402 doi : 10.1093 / nar / 25.17.3389 .
9254694 3 thompson jd , higgins dg , gibson tj ( 1994 ) clustal w : improving the sensitivity of progressive multiple sequence alignment through sequence weighting , position - specific gap penalties and weight matrix choice . nucleic acids res 22 : 4673 - 4680 doi : 10.1093 / nar / 22.22.4673 .
7984417 4 vandewalle p ( 2012 ) code sharing is associated with research impact in image processing . ieee computing in science & engineering 14 : 42 - 47 http :// rr.epfl.ch / 37 / .
5 morin a , urban j , sliz p ( 2012 ) a quick guide to software licensing for the scientist - programmer . plos comput biol 8 7 : e1002598 doi : 10.1371 / journal.pcbi.1002598 .
22844236 6 cock p ( 2011 ) opening up ncbi blast ?
available : http :// blastedbio.blogspot.co.uk / 2011 / 08 / opening - up - ncbi - blast.html accessed 27 october 2012 .
7 wren jd ( 2008 ) url decay in medline - - a 4 - year follow - up study . bioinformatics 24 11 : 1381 - 1385 doi : 10.1093 / bioinformatics / btn127 .
18413326 8 dall'olio gm , marino j , schubert m , keys kl , stefan mi , et al ( 2011 ) ten simple rules for getting help from online scientific communities . plos comput biol 7 9 : e1002202 doi : 10.1371 / journal.pcbi.1002202 .
21980280 9 sofware carpentry ( 2012 ) http :// software - carpentry.org / accessed 27 october 2012 .
10 aruliah da , titus brown c , chue hong np , davis m , guy rt , et al .
( 2012 ) best practices for scientific computing .
eprint arxiv : 1210.0530 .
available : http :// arxiv.org / abs / 1210.0530 .
accessed 27 october 2012 .
11 stajich je , block d , boulez k , brenner se , chervitz sa , et al ( 2012 ) the bioperl toolkit : perl modules for the life sciences . genome res 12 10 : 1611 - 1618 doi : 10.1101 / gr.361602 .
12 cock pj , antao t , chang jt , chapman ba , cox cj , et al ( 2009 ) biopython : freely available python tools for computational molecular biology and bioinformatics . bioinformatics 25 11 : 1422 - 1423 epub 20 mar 2009 .
doi : 10.1093 / bioinformatics / btp163 .
19304878 13 prlic a , yates a , bliven se , rose pw , jacobsen j , et al ( 2012 ) biojava : an open - source framework for bioinformatics in 2012 . bioinformatics 28 20 : 2693 - 2695 epub 9 aug 2012 .
doi : 10.1093 / bioinformatics / bts494 .
22877863 14 goto n , prins p , nakao m , bonnal r , aerts j , et al ( 2010 ) bioruby : bioinformatics software for the ruby programming language . bioinformatics 26 20 : 2617 - 2619 doi : 10.1093 / bioinformatics / btq475 .
20739307 15 barnes n ( 2012 ) the science code manifesto .
available : http :// sciencecodemanifesto.org / .
accessed 15 october 2012 .
16 merali zeeya ( 2010 ) computational science : ... error ... why scientific programming does not compute . nature 467 : 775 - 777 doi : 10.1038 / 467775a .
20944712 17 rother k , potrzebowski w , puton t , rother m , wywial e , et al ( 2012 ) a toolbox for developing bioinformatics software . brief bioinform 13 2 : 244 - 257 epub 29 jul 2011 .
doi : 10.1093 / bib / bbr035 .
21803787 18 the apache software foundation .
the apache way .
available : http :// incubator.apache.org / learn / theapacheway.html .
accessed 17 october 2012 .
19 gardler r ( 2010 ) community development at the apache software foundation .
ross gardler 's keynote from bosc 2010 .
available : http :// www.slideshare.net / bosc2010 / gardler - bosc2010 - communitydevelopmentattheasf .
accessed 27 october 2012 .
20 bonnal rj , aerts j , githinji g , goto n , maclean d , et al ( 2012 ) biogem : an effective tool - based approach for scaling up open source software development in bioinformatics . bioinformatics 28 7 : 1035 - 1037 epub 12 feb 2012 .
doi : 10.1093 / bioinformatics / bts080 .
22332238 21 raymond es ( 1999 ) the cathedral & the bazaar .
o'reilly .
isbn 1 - 56592 - 724 - 9 .
22 kane dw , hohman mm , cerami eg , mccormick mw , kuhlmman kf , et al ( 2006 ) agile methods in biomedical software development : a multi - site experience report . bmc bioinformatics 7 : 273 doi : 10.1186 / 1471 - 2105 - 7 - 273 .
16734914 23 vicens q , bourne pe ( 2007 ) ten simple rules for a successful collaboration . plos comput biol 3 3 : e44 doi : 10.1371 / journal.pcbi.0030044 .
17397252 24 bourne pe , chalupa lm ( 2006 ) ten simple rules for getting grants . plos comput biol 2 2 : e12 doi : 10.1371 / journal.pcbi.0020012 .
16501664