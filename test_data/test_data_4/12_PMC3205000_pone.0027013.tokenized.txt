plos one plos one plos plosone plos one 1932 - 6203 public library of science san francisco , usa 22066027 3205000 pone - d - 11 - 15445 10.1371 / journal.pone.0027013 research articlebiologycomputational biologycomputational neurosciencemolecular cell biologycellular typesneuronsneurosciencecellular neurosciencecomputational neuroscienceneural networkscomputer sciencecomputerized simulations hands - on parameter search for neural simulations by a midi - controller parameter search by a midi - controller eichner hubert * borst alexander max - planck - institute of neurobiology , department of systems and computational neurobiology , martinsried , germany brezina vladimir editor mount sinai school of medicine , united states of america * e - mail : eichner @ neuro.mpg.de conceived and designed the experiments : he ab. performed the experiments : he ab. analyzed the data : he ab. contributed reagents / materials / analysis tools : he ab. wrote the paper : he ab .
2011 31 10 2011 6 10 e27013 4 8 2011 7 10 2011 eichner , borst .
2011 this is an open - access article distributed under the terms of the creative commons attribution license , which permits unrestricted use , distribution , and reproduction in any medium , provided the original author and source are properly credited .
computational neuroscientists frequently encounter the challenge of parameter fitting - exploring a usually high dimensional variable space to find a parameter set that reproduces an experimental data set .
one common approach is using automated search algorithms such as gradient descent or genetic algorithms .
however , these approaches suffer several shortcomings related to their lack of understanding the underlying question , such as defining a suitable error function or getting stuck in local minima .
another widespread approach is manual parameter fitting using a keyboard or a mouse , evaluating different parameter sets following the users intuition .
however , this process is often cumbersome and time - intensive .
here , we present a new method for manual parameter fitting .
a midi controller provides input to the simulation software , where model parameters are then tuned according to the knob and slider positions on the device .
the model is immediately updated on every parameter change , continuously plotting the latest results .
given reasonably short simulation times of less than one second , we find this method to be highly efficient in quickly determining good parameter sets .
our approach bears a close resemblance to tuning the sound of an analog synthesizer , giving the user a very good intuition of the problem at hand , such as immediate feedback if and how results are affected by specific parameter changes .
in addition to be used in research , our approach should be an ideal teaching tool , allowing students to interactively explore complex models such as hodgkin - huxley or dynamical systems .
introduction a frequent challenge in computational neuroscience is to come up with models that properly replicate some quantitative or qualitative characteristics of measured data .
this process usually involves exploring a high - dimensional space of model parameters in order to arrive at satisfying fits of the data in question .
one common approach is to use an automated search algorithm such as gradient descent [ 1 ] , variants of newton 's method [ 2 ] or genetic algorithms [ 3 ] .
while successfully applied in a large range of projects ( reviewed in [ 4 ]) , these methods also suffer from several shortcomings , such as requiring an exactly defined measure of quality for a given parameter set ( an error function ) , slow convergence or ending up in local minima .
most notably , the search algorithm is usually unaware of the intrinsic structure of the underlying problem .
a particularly profound problem , however , becomes apparent when the user desires a good qualitative , not quantitative fit , for instance because the model is intentionally simplified and thus unable to exactly reproduce the results , or because the desired behavior of the model is hard to formulate in mathematical terms .
in such cases , standard error functions like the root mean squared difference between the actual and the target output may fail to arrive at suitable parameter sets , and significant effort is spent on defining and refining a proper error function .
a further problem is optimizing multiple objectives at the same time [ 5 ] when the tradeoff between the different objectives depends on the user 's intuition .
consequently , a further frequently employed approach is manual parameter fitting ([ 6 ] , [ 7 ]) .
here , the user evaluates different parameter sets , modifies them according to his intuition of the problem , evaluates them again etc .
this process usually involves a lot of typing and mouse movements , and is often a cumbersome and tedious procedure .
inspired by the learning process on musical instruments or synthesizers , where the constant auditory feedback shapes the student 's technical abilities , we treat the process of parameter adjustment in a similar way .
the parameters are now controlled by a midi device , and the model is continuously simulated with the actual parameters , repeatedly plotting the latest result on the screen .
materials and methods an evolution uc - 33 usb midi controller ( m - audio / avid technology inc. , usa ) attached to a pc ( intel core 2 quad q9550 , 2.83 ghz , 8 gb main memory , running windows 7 ) is accessed by a middleware software layer ( see file s1 ) written in the java programming language ( oracle corporation , redwood shores , ca ; compiled with jdk version 1.6 ) .
this program is notified about control element changes via the javax.sound.midi application programming interface and stores the positions of the modified control elements .
the middleware is then accessed by the simulation software .
we employed either the matlab ( mathworks , natick , ma ; jre version 1.6 ) or idl ( ittvis , boulder , co ; jre version 1.6 ) development environment which both are unable to directly access midi devices by default but can readily communicate with java software .
the information about control element changes is retrieved by the simulation software , which then adjusts the model parameters , reruns the simulation and plots the most recent results on the screen .
while the actual implementation of the graphical user interface is left completely to the user , we found it helpful to illustrate the control elements and their positions right next to the simulation results ; this way , the user does not have to shift attention from the midi controller to the screen and vice versa .
in its current version , the middleware software layer supports only one midi controller , but it could be enhanced to support multiple devices to increase the number of control elements .
while this concept has been applied to multiple problems in our lab , we here present a popular example for illustration purposes , the simulation of the hodgkin - huxley equations [ 8 ] .
the spiking mechanism is formally described by the following current balance equation for one compartment : with and denoting the maximum sodium and potassium conductance , respectively , and with the gating variables defined bywe assume voltage - independent , but user - controlled values for the time constants , and approximate the steady - state functions of the gating variables by a sigmoidal function of the formthis slight deviation from the original hodgkin - huxley allows for easier modification of the time constant and the activation curve , the latter by shifting it on the voltage axis ( mux ) or changing its slope ( sx ) .
the sodium and potassium conductances are computed using the explicit euler scheme ; the final equation for computing the voltage at the next time step is then obtained by applying the implicit euler method for greater numerical stability : we use a time step of deltat = 0.1 ms and simulate the model for 300 ms , with a step current injection of i na lasting from t = 50 ms to t = 250 ms. the eleven model parameters taum , tauh , taun , mum , muh , mun , sm , sh , sn , , and the current amplitude i are set via the midi controller .
the java middleware layer is polled for control element changes in an infinite loop .
each time a change is observed , the corresponding parameters are adjusted , the model is simulated with the new parameter set , and the new result is immediately plotted on the screen .
results we attached a midi controller featuring knobs , sliders and buttons to the computer performing the simulations .
the model parameters and the simulation results are updated whenever the position of a midi control element is changed .
this leads to a more or less instant change of the depicted results , depending on the simulation runtime .
the method therefore provides a closed - loop experience to the user .
indeed , and similar to using a musical instrument or tuning the sound of an analog synthesizer , we find that being able to instantly and , equally important , continuously observe changes in the results based on manually controlling the knobs and sliders gives a certain intuition for the problem at hand .
this allows for a rapid exploration of high - dimensional parameter spaces and identifying potential solutions to a certain problem .
it also should make this technique a great tool for teaching .
to illustrate this method , we chose one of the most popular models in neuroscience , the hodgkin - huxley equations for an excitable patch of membrane [ 8 ] , in a slightly modified form to allow for greater user control of the ion channel activation and inactivation process ( see materials & methods ) .
figure 1 depicts a graphical user interface written in matlab .
the knobs and sliders on the midi controller that are assigned to the various changeable parameters are replicated in the left portion of the window ; this way , the user does not have to switch attention between the controller and the computer screen .
changes on a knob or slider instantly change the internal parameters of the simulation , and the most up - to - date activation curves , current injection and voltage traces are plotted with a latency of about 80 ms .
10.1371 / journal.pone.0027013.g001 figure 1 using a midi device to control a computer simulation .
on the computer screen , the application ( in this case , a simulation of the hodgkin - huxley model ) is depicted , with the actually used control elements of the midi controller ( highlighted by a green template ) replicated on the left side of the application .
the simulation is updated on every control element change , and the latest results are immediately plotted on the right side of the application window .
it is straightforward to use our middleware layer for parameter fitting .
it is written in java , which allows for accessing the controller from various development environments that do not natively support midi devices but allow accessing java classes , such as matlab or idl , but also using other programming language capable of interfacing java .
briefly , the middleware layer has to be initialized with one command ; after that , a single function returns tuples of the form ( control element id , value ) when a knob , switch or button has been turned or pressed .
the user has to modify existing programs only slightly to continuously check for events from the controller , followed by translating the received values into specific parameter changes. whether the relation between the control element value and the parameter is linear , exponentially etc. is left to the user .
on rare occasions where either the dynamic range or the precision of a knob or slider is found to be insufficient , we assigned other knobs that dynamically adjust the parameter range or precision of the corresponding primary control element .
for instance , if a simulation parameter is obtained by linearly mapping the knob position to the interval [ low ; high ] , then a second knob might be used to change either low or high ( on an exponential scale ) , or both simultaneously by widening or shortening the interval .
figure 2 shows three example fits of the hodgkin - huxley model responding to a current injection step ( red trace ) : regular spiking ( fig. 2a ) , subthreshold oscillations ( fig. 2b ) and a parameter set that exhibits transient spiking ( fig. 2c ) .
figure 2d depicts the control element changes performed by the user for the six parameters that were varied to arrive at the results of figure 2c .
the ordinate corresponds to the value reported by the midi controller for a specific knob or slider , which lies between 0 and 127 .
it can be seen that some parameters are changed only once ( current injection strength iinj ) , while others are found to be negligible ( midpoint of sodium activation curve mum ) or changed multiple times , even at once ( sm and sh ) .
10.1371 / journal.pone.0027013.g002 figure 2 simulation of the hodgkin huxley model with three example parameter sets .
the red line shows the duration of the current injection .
( a ) regular spiking behavior .
( b ) a parameter set that leads to subthreshold oscillations .
( c ) a parameter set that exhibits transient spiking upon current injection .
( d ) trajectory of the modified parameters during fitting of the model in c. the ordinate ranges from 0 to 127 , the range of control elements on a midi controller .
the abscissa does not depict absolute time but the simulation index .
discussion we presented a novel method for manual parameter fitting that provides the user with an external device for adjusting the model 's variables .
for illustrational purposes , we restricted our results to the relatively simple example of simulating the hodgkin - huxley equationhowever , we have used the method on multiple occasions for more complex tasks where defining an exact error function was difficult .
the major limitation of our technique is latency , that is , the delay between a user - controlled parameter change on the controller and the actual display of the simulated results based on the new parameter set .
while the delay between e. g. turning a knob and changing the corresponding parameter in the simulation was found to be negligible , simulation times of about a second or more lead to problems .
to draw another analogy to musical instruments , imagine trying to learn the piano when each time a key is pressed , it takes a second until the actual tone can be heard .
in a similar way , runtimes in the order of seconds limit the intuition the user can gain for a model .
several classes of problems , such as complex multi - compartment simulations with active membrane parameters , or simulations of integrate & fire neurons that require many repetitions to form a reliable firing rate estimate , are therefore likely excluded from this technique in the near future , at least on single pcs .
we would like to point out , however , that these challenges may be alleviated by using coarser discretization steps , e. g. increasing the time step size of simulations or reducing the number of compartments .
other possibilities are careful optimization of the source code , such as computing the voltage - dependent forward and backward rates of ion channels of the hodgkin - huxley model in advance and using look - up tables during the simulation , as described in the previous section .
in addition , parallelizing the simulation by e. g. multi - threading , as already employed in matlab for basic vector and matrix operations , and further advances in microprocessor development may also render the method more realistic in the future for an even broader class of problems .
although only 12 knobs and sliders were used in the hodgkin - huxley example , there is no software - imposed restriction on the supported number of control elements ; the midi controller we used has 33 knobs and sliders and , in addition , 14 buttons .
it is possible to control more parameters by assigning a control element to several simulation variables and switch between these assignments by using push buttons [ 9 ] .
in addition , a coherent user experience upon such switches would require a midi controller where the sliders are motor - controlled to move them to the correct position after an assignment switch , an option we are currently investigating .
a further possibility is to connect multiple midi controllers , but this would require changes to the java middleware .
finally , we would like to stress the applicability of our method to teaching .
every senior scientist will agree that a certain familiarity with a method or a model is best achieved by virtually playing around with it and putting it to use .
accordingly , rather complex models such as non - linear dynamical systems could , in addition to the theoretical introduction , be taught by providing students with the simulation and a controller , allowing them to become familiar with the problem and solve exercises such as finding bifurcation points or optimal solutions to specific questions .
supporting information file s1 source code for the midi interface .
( doc ) click here for additional data file .
we would like to thank friedrich foerstner for initial help with the midi controller and useful discussions .
competing interests : the authors have declared that no competing interests exist .
funding : this work was supported by the max - planck - society .
the funders had no role in study design , data collection and analysis , decision to publish , or preparation of the manuscript .
references 1 snyman ja 2005 practical mathematical optimization : an introduction to basic optimization theory and classical and new gradient - based algorithms ( new york , springer ) 2 bonnans jf gilbert jc lemarechal c sagastizabal ca 2006 newtonian methods .
51 66 in numerical optimization ( berlin / heidelberg , springer ) 3 holland jh 1992 adaptation in natural and artificial systems : an introductory analysis with applications to biology , control , and artificial intelligence , 1st edn ( boston , mit press ) 4 van geit w de schutter e achard p 2008 automated neuron model optimization techniques : a review .
biol cybern 99 241 251 19011918 5 druckmann s banitt y gidon a schurmann f markram h 2007 a novel multiple objective optimization framework for constraining conductance - based neuron models by experimental data .
front neurosci 1 7 18 18982116 6 haag j theunissen f borst a 1997 the intrinsic electrophysiological characteristics of fly lobula plate tangential cells : ii. active membrane properties .
j comput neurosci 4 349 369 9427120 7 spavieri dl jr eichner h borst a 2010 coding efficiency of fly motion processing is set by firing rate , not firing precision .
plos comput biol 6 e1000860 20661305 8 hodgkin al huxley af 1952 a quantitative description of membrane current and its application to conduction and excitation in nerve .
j physiol 117 500 544 12991237 9 wicher d berlau j walther c borst a 2006 peptidergic counter - regulation of ca2 + and na + dependent k + currents modulates the shape of action potentials in neurosecretory insect neurons .
j neurophysiol 95 311 322 16177173