j cheminform j cheminform journal of cheminformatics 1758 - 2946 biomed central 22985496 3558358 1758 - 2946 - 4 - 21 10.1186 / 1758 - 2946 - 4 - 21 software omg : open molecule generator peironcely julio e 1234 peironcely @ chem.leidenuniv.nl rojas - cherto miguel 23 m.rojas @ lacdr.leidenuniv.nl fichera davide 4 davide.fichera @ epigenomique.genopole.fr reijmers theo 23 t.reijmers @ lacdr.leidenuniv.nl coulier leon 13 leon.coulier @ tno.nl faulon jean - loup 4 jean - loup.faulon @ issb.genopole.fr hankemeier thomas 23 hankemeier @ lacdr.leidenuniv.nl 1 tno research group quality & safety , p.o. box 360 , nl - 3700 , aj , zeist , the netherlands 2 leiden / amsterdam center for drug research , leiden university , einsteinweg 55 , 2333 , cc , leiden , the netherlands 3 netherlands metabolomics centre , einsteinweg 55 , 2333 , cc , leiden , the netherlands 4 issb , institute of systems and synthetic biology , university of evry , genopole campus 1 , genavenir 6 , 5 rue henri desbrueres , evry , 91030 , cedex , france 2012 17 9 2012 4 21 21 18 5 2012 3 9 2012 copyright ( c ) 2012 peironcely et al. ; licensee chemistry central ltd .
2012 peironcely et al. ; licensee chemistry central ltd.this is an open access article distributed under the terms of the creative commons attribution license ( http :// creativecommons.org / licenses / by / 2.0 ) , which permits unrestricted use , distribution , and reproduction in any medium , provided the original work is properly cited .
computer assisted structure elucidation has been used for decades to discover the chemical structure of unknown compounds .
in this work we introduce the first open source structure generator , open molecule generator ( omg ) , which for a given elemental composition produces all non - isomorphic chemical structures that match that elemental composition .
furthermore , this structure generator can accept as additional input one or multiple non - overlapping prescribed substructures to drastically reduce the number of possible chemical structures .
being open source allows for customization and future extension of its functionality .
omg relies on a modified version of the canonical augmentation path , which grows intermediate chemical structures by adding bonds and checks that at each step only unique molecules are produced .
in order to benchmark the tool , we generated chemical structures for the elemental formulas and substructures of different metabolites and compared the results with a commercially available structure generator .
the results obtained , i.e. the number of molecules generated , were identical for elemental compositions having only c , o and h. for elemental compositions containing c , o , h , n , p and s , omg produces all the chemically valid molecules while the other generator produces more , yet chemically impossible , molecules .
the chemical completeness of the omg results comes at the expense of being slower than the commercial generator .
in addition to being open source , omg clearly showed the added value of constraining the solution space by using multiple prescribed substructures as input .
we expect this structure generator to be useful in many fields , but to be especially of great importance for metabolomics , where identifying unknown metabolites is still a major bottleneck .
computer assisted structure elucidation structure generator molecule generator open source chemical structures metabolite identification metabolite metabolomics background computer assisted structure elucidation ( case ) of chemical compounds is one of the classical problems positioned at the intersection of informatics , chemistry , and mathematics .
case tools have been employed during decades to elucidate the chemical structure of small organic molecules .
in its most general definition , a structure elucidation system receives experimental chemistry data of an unknown molecule as input , and outputs a list of possible chemical structures .
the input can be the elemental composition of the elusive molecule , nuclear magnetic resonance ( nmr ) and / or mass spectrometry ( ms ) spectra ( provided the generator can simulate spectra and match it to the experimental ones ) or information of prescribed substructures .
the output is a list of candidate structures matching these conditions , ideally containing all possible structures without duplications .
a small list of candidates is dependent on the number of constraints derived from experimental data ; the higher the number of constraints we use the smaller the candidate list will be. the ultimate goal for such a system being fully automated and returning only one and correct molecule is not yet at our reach , despite decades of research [ 1 ] .
the dendral [ 2 ] project is widely regarded as the initiator of the use of these methods to provide a system for computer assisted structure elucidation ( case ) .
it involved the development of artificial intelligence algorithms that would extract heuristics from ms and nmr data and use them to constrain the output of a structure generator .
congen was the structure generator developed within dendral , which preceded a more advanced generator known as genoa [ 3 ] .
many commercial structure generators were developed later , most renowned ones being chemics [ 4 ] , assemble [ 5 ] , smog [ 6 ] , and the most widely used of all of them , the general purpose structure generator molgen [ 7 ] .
these closed source software tools work like a black box , where the user cannot , on the one hand , understand the functioning of the software and on the other hand , customize the tool to his needs .
these drawbacks of closed source software ( where the source code is not provided ) can be circumvented by open source tools .
two open source structure generators have been developed that work with nmr data , the deterministic lsd [ 8 ] and the stochastic seneca [ 9 ] .
implementation of open source stochastic and deterministic structure generators have been explored within the chemistry development kit ( cdk ) [ 10,11 ] .
unfortunately , these generators failed to generate all chemical structures possible and were discontinued in recent releases of cdk .
despite these efforts , no general purpose deterministic structure generator has been developed in an open source format so far .
the advance of " omics " sciences in the last decade , in particular of metabolomics [ 12 ] , has renewed the interest of researchers in developing better structure generators .
metabolomics aims at detecting and identifying metabolites in an organism and has resulted in a large list of potential biomarkers for which the chemical structure is unknown [ 1,13 ] .
when trying to identify the structure of unknown molecules , scientists first perform an identity search by querying reference databases using their experimental information [ 1,14 - 16 ] .
in such case , they use the elemental composition of the metabolite derived from mass spectrometry ( ms ) or the spectra of nuclear magnetic resonance ( nmr ) .
when the metabolite is a real unknown it is not present in any database , therefore the query returns no results .
this forces scientists to propose candidate structures using a different approach , one of them is using a structure generator [ 17,18 ] , which produces all possible molecules given an elemental composition and optional , other constraints .
examples of constraints are prescribed substructures that each output molecules should contain and that are derived from experimental nmr , ms2 , or msn data .
hence , the need for deterministic and flexible structure generators in the field of metabolomics presents should be met with new algorithms [ 1 ] .
the majority of structure generators rely on graph theory to produce their desired output .
interestingly , compounds can be represented as molecular graphs where atoms and bonds are translated into vertices and edges , respectively , to which theorems and algorithms proposed by graph theory can be applied .
this ensures that the output is correct , exhaustive , and free of isomorphs .
such methods can be the orderly enumeration proposed by read [ 19 ] and faradzev [ 20 ] , a stochastic generator [ 21 ] , the homomorphism principle [ 22 ] used by molgen , or the " canonical augmentation path " proposed by mckay [ 23 ] .
this last method , originally intended to generate simple graphs by adding vertices , has been applied to the generation of some families of graphs and also to generate the chemical universe of molecules up to 11 atoms [ 24 ] and recently to 13 atoms [ 25 ] .
despite the goal was to generate molecules , these two approaches initially employed canonical path augmentation to generate all possible simple graphs up to 11 and 13 vertices , respectively .
posterior topological and ring system filter were used to remove unwanted graphs .
lastly , the vertices were colored with chemical elements and the edges with a bond order , which turned the graphs into molecules .
simple chemical constraints like connectivity and atom valence were applied to reduce the list of final molecules .
this process , which relies on generating simple graph , is necessarily limited on the size of the molecules that can be generated because a linear increase in the number of atoms produces an exponential increase of both the number of graphs and molecules .
here we present the open molecule generator ( omg ) , a structure generator based too on mckay augmentation algorithms , but rather than first generating graphs and secondly transforming these graphs into molecules , our implementation of mckay technique directly constructs molecules .
in this way we can generate chemical structures much greater than 13 atoms .
essential concepts of graph theory will be introduced in the methods section .
chen mentioned two future challenges facing case systems [ 26 ] .
the first challenge for elucidating structures is to have a knowledge system of previously identified compounds , as well as mining tools for such data .
in this direction , rojas - cherto et al .
[ 27 ] developed a system to store spectral data and mine the database to extract substructure information that can be used as prescribed substructures in our structure generator .
the second challenge is the need for filtering and selecting candidate structures .
this is often performed by predicting a property of the candidate structures that is related to the field of research , for instance , predicting the spectra in analytical chemistry , the bioactivity in ligand design , or the metabolite - likeness [ 28 ] in metabolomics studies , to name a few .
furthermore , the need of a structure generator tool that can be adapted to the requirements of the field in which it is going to be applied , demonstrates the usefulness of open source tools compared to commercial " black box " generators .
in this paper we present the first general purpose open source structure generator , open molecule generator .
omg adapts methodologies from the field of graph theory and deterministic graph enumeration to the classical problem of chemical structure generation .
in this sense , we have used the approach of " canonical path augmentation " to ensure that we exhaustively generate non - isomorphic chemical structures for a given elemental composition .
this generation tool has been implemented using cdk [ 10,11 ] , a widely used open source library for the development of chemoinformatics software .
it allowed the representation of entities such as molecules , atoms , and bonds in our program and the use of functions like removing hydrogen atoms , checking the saturation of a molecule , removing a bond , and many more .
the resulting tool generates all possible non - duplicate chemical structures for a given elemental composition , with the option to generate only those that contain one or multiple non - overlapping substructures , which is the most important constrain to reduce the number of resulting candidate structures when a knowledge system is not available [ 18 ] .
we have used omg to generate molecules for the elemental composition of well known metabolites , also including one or more prescribed substructures as input .
these results are compared to those obtained by molgen .
materials and methods chemical elements and atom types we would like to describe some concepts related to atoms that are necessary to understand the theory and algorithm behind omg and the use of cdk to handle chemistry .
in nature , atoms of different chemical elements ( carbon , nitrogen , oxygen , and others ) are connected to each other by bonds in order to form molecules .
the valence , to which we will also refer as degree , of these chemical elements determine how many bonds each element can have .
carbon has a valence of 4 , oxygen of 2 , nitrogen of 3 or 5 , sulfur of 2,4 or 6 , phosphor of 3 or 5 .
thus a carbon atom becomes saturated when it has 4 bonds , where a single bond counts as one bond , a double as two bonds , and a triple as three bonds .
regarding molecules , we consider a molecule to be saturated when all its atoms are saturated .
in some special occasions , atoms are charged , which makes them having a different valence .
in the case of omg , we only use neutral atoms and as a consequence only neutral molecules are produced , therefore all finished molecules will contain atoms with the valences mentioned before .
a chemical element can have multiple atom types , also for the same valence of an element , as defined by the dictionary of atom types in cdk .
this dictionary defines for each atom the number of neighbors , pi bonds , charges , lone electron pairs , and hybridizations , in order to accommodate the different states a chemical element can have due to different bonds , number of neighboring atoms , charges and hybridizations .
these atom types are based on the chemical elements that have been observed in nature for saturated molecules .
this is why we use the cdk atom dictionary to validate the atoms of our finished molecules .
omg will output only molecules that are saturated and that contain the atoms specified in the elemental composition .
apart from finished molecules , omg has to represent during the generation process intermediate chemical structures that are not finished yet .
these might contain disconnected fragments and atoms that are not saturated .
cdk atom types are not designed to represent atom types of unsaturated chemical elements ; therefore we opted for implementing a simple atom dictionary .
for each chemical element , this dictionary defines its valence , in other words , the maximum degree .
hence for intermediate chemical structures we only check that the current degree of each atom does not exceed the maximum degree .
molgen can also produce molecules with multiple valences , but it handles them in a different way .
while with omg only the elemental composition needs to be provided to generate molecules with multiple valences , molgen requires knowing a priori which one of the multiple valences has to be used .
it uses by default the lowest valence , this is , n valence 3 , p valence 3 , and s valence 2 , unless a different valence is specified .
in table 1 the atom types produced by omg and molgen for non - default valences are presented .
using sulfur as an example , omg will output molecules with containing sulfur valence 2 , 4 and 6 .
for the same chemical element , molgen will produce by default molecules with sulfur valence 2 .
if one sets the valence of sulfur to 6 , it will only produce sulfur valence 6 and not valence 2 and valence 4 .
molgen cannot generate molecules with atoms of different valences for the same chemical element , this is , if molecule has two sulfur atoms , one will not be of valence 4 and the other of valence 6 , both will be either valence 2 , 4 or 6 .
table 1 atom types produced by omg and molgen for non - default valences of n ( 5 ) , p ( 5 ) and s ( 4 and 6 ) valence molgen omg n valence 5 p valence 5 s valencee 4 s valence 6 by default omg outputs molecules with valences n ( 3 and 5 ) , p ( 3 and 5 ) , and s ( 2,4 and 6 ). by default molgen outputs molecules with valences n ( 3 ) , p ( 3 ) , and s ( 2 ) .
the principle followed by cdk to build its atom dictionary is to allow atom types with valences for which there is a consensus agreement on their existence , this is , for which known molecules exist with such valences .
conversely , molgen produces all theoretically possible combinations of bond orders for a given valence , as it can be observed in table 1 .
for example , as it can be seen for p valence 5 omg only produces one atom type with one double bond and three single bonds .
in comparison , molgen produces all the combinations of single , double , and triple bonds that add to 5 .
as a consequence , when the desired valence is unknown , which is usually the case in metabolite identification , molecules need to be generated with all possible valences .
as a result , the number of output molecules by both generators is different for elemental compositions that contain chemical elements with multiple valences .
this deterministic generation of valences in molgen comes at the expense of generating molecules having unrealistic structures .
graph theory and chemistry the chemical structure of molecules can be represented as a graph , where atoms and bonds in molecules correspond to vertices and edges , respectively , in graphs .
in molecules , bonds connecting two atoms can have a degree depending on the number of electrons they share .
such a degree can also be assigned to the edges of a graph , which is called a multigraph .
the different chemical elements present in the periodic table are represented in graphs as colors assigned to the vertices .
we define a non - directed colored multigraph g = ( v , e ) as where v is a set of vertices and e is a multiset of edges , where each edge is an unordered pair of vertices , and a function col : v - - > colors .
in this multigraph , we say that a , b in v are n - connected if there are exactly n edges ( a , b ) in v. apart from the color function , a multigraph is characterized by the function d : v x v - - > n which returns the degree of the edge connecting each couple of vertices. from now on we will indistinctively refer to graphs and multigraphs .
in chemistry , the valence rule determines the maximum number of bonds each chemical element has .
in order to take this into account , we define dv : v - - > n which returns the number of edges of a given vertex and a max - degree function md : v - - > m , which returns the maximum number of edges of a given vertex .
we say that a multigraph is under - saturated if for - all v in v , dv ( v ) <= md ( v ) there is at least one vertex such that dv ( v ') < md ( v ') .
a multigraph is saturated if the equality dv = md holds for every vertex .
in chemistry , molecules correspond to saturated colored multigraphs and max - degree depends on the color , which is the chemical element .
for instance , for a carbon element , md ( c ) = 4 and for an oxygen element , md ( o ) = 2 .
we consider a multigraph to be connected if for - all v , w in v , exists s { v,w } = { v1 , ... , vm } such that v , v1 and vm , w are connected and for each i < m , vi is connected to vi + 1 .
in other words , a multigraph is connected if for all pair of vertices , there exists at least one path s { v,w } connecting both vertices .
this condition is necessary for chemistry , since intermediate chemical structures in the generation process can be composed of disconnected fragments , it ensures that the generated molecules are one fully connected structure and not made of disconnected substructures .
notice that hydrogen atoms ( the most frequently found chemical elements with degree 1 ) are not considered in the generation process , since they are terminal elements of the molecule and they cannot connect two disconnected elements of the molecule .
hydrogen atoms are only used to validate the completeness of finished molecules .
halogen atoms like fluorine , chlorine , and iodine , also of degree 1 , are considered during the generation process .
graph labeling an isomorphism pi is a function that for each vertex v in v , col ( pi ( v )) = col ( v ) and for each pair of vertices v in v , v ' in v ' , d ( pi ( v ) , pi ( v ')) = d ( v , v ') .
a labeling function sigma : v - - > { 1 , ... , n } is a bijective map from the vertices of a colored multigraph to an ordered list labels with a cardinality equal to the number of vertices .
put simple sigma , assigns to each vertex a label .
let sigma - 1 be the inverse function of sigma , which returns the vertex corresponding to a label .
we say a labeling function is canonical if given any two isomorphic colored multigraphs g = ( v , e ) and g ' = ( v ' , e ') , the bijective function pi : v - - > v ' defined as pi ( a ) = sigma - 1 ( sigma ( a )) is an isomorphism of v in v ' .
therefore , a canonically labeled multigraph is a multigraph whose vertices are associated to an ordered list through a canonical labeling function .
furthermore , a canonical hash of the labeling is a bijective function between the space of the canonically labeled multigraphs and the value space and it is represented as a string of integers .
it is interesting to note here that two isomorphic graphs have the same canonical hash , a fact that will be used to remove duplicated molecules during the generation process .
using fragments a fragment or substructure of a molecule is equivalent to a fragment or subgraph of a graph .
we define a fragment as a subset of a graph and it is characterized by the function df : v x v - - > n where n is the number of edges connecting each pair of vertices in the subgraph .
such df has to fulfill the condition df ( a , b ) <= d ( a , b ) , for - all a , b in v and at least for one edge df < d , this is , the fragment should have fewer edges than the graph .
canonical augmentation an augmentation of a multigraph g = ( v , e ) is a multigraph g ' = ( v ' , e ') , defined on the same set of vertices , such that for - alla,binv,dga,b = dg'a,b , except for one and only one pair where dg '( a , b ) = dg ( a , b ) + 1 .
let e ' in e ' be the edge which degree has been increased , d ( e ') = d ( e ) + 1 .
let ec ' be the last edge of sigma ( g ') and ac ' , bc ' in v the vertices of ec ' .
consider sigma - 1 ( ac ' , bc ') = a ' ' , b ' ' to vertices of g ' ' , a copy of g ' , to which a bond order decrease is performed d ( a ' ' , b ' ') = d ( a ' ' , b ' ') - 1 .
the resulting multigraph g ' ' after this decrease in bond order , can be seen as the result of a canonical deletion on g ' , the reverse operation of a canonical augmentation .
in our definition of canonical augmentation we consider a multigraph g ' = ( v ' , e ') to be canonically augmented from g = ( v , e ) if it is an augmentation and sigma ( g ' ') = sigma ( g ) .
in other words , we consider g ' to be a canonical augmentation of g if a canonical deletion in g ' results in g. description of the algorithm the generation of structures can be seen as a tree of intermediate chemical structures that our tool explores .
at the root of the tree we find a collection of fully isolated / disconnected atoms .
one bond is added at each level of the tree , resulting in fully connected / finished molecules at the leaves .
the canonical augmentation path is a depth - first backtracking algorithm , where the recursive function generate described in algorithm 1 , implements the addition of one bond in all possible ways for a given intermediate chemical structure , and evaluates for each extended molecule that this extension has been performed in a canonical way , as described before .
here adding one bond means increasing the degree of the bond between two atoms , hence a single bond becomes a double bond and a double bond becomes a triple bond .
if there is no bond between two atoms , a single bond is created. between lines 2 and 9 of algorithm 1 , the molecule is stored if it is finished , which occurs when the molecule is saturated and all the atoms of the elemental composition , including the hydrogen atoms , have been used , all the atoms are validated by the cdk atom dictionary and are connected forming one single structure and not multiple disconnected fragments .
in the case the molecule is not finished , it would be extended in all possible ways by adding one bond .
if there exists a bond between a pair of atoms function extend , in line 12 of algorithm 1 , will increase the multiplicity .
the generation of new bonds is controlled by omg atom type definitions for intermediate chemical structures , which guarantee that the degree of the atoms does not exceed the maximum degree allowed for its chemical element .
function canonize , in line 15 of algorithm 1 , returns the canonical version of the molecule .
we modified the graph canonizer nauty [ 23,29 ] in order to allow multigraphs and not only simple graphs .
other canonizers for graphs exist like molgen - cid [ 30 ] or the signature canonizer [ 31 ] , but nauty has been the most widely used for graphs as well as for chemistry problems , like inchi [ 32 ] codes .
nauty is the canonizer of choice because it is the fastest of all available canonizers for bounded valence graphs below 100 vertices [ 33 ] ( molecules are examples of this class of graphs ) .
firstly , the function canonize translates the molecule into a colored multigraph .
secondly , it utilizes nauty to calculate the canonical labeling of the multigraph .
thirdly , this canonical labeling is used to construct the canonical version of the input molecule .
lastly , the canonical hash string of each augmented molecule is stored in a hash map , lines 16 and 17 , in order to remove duplicated extensions at each level of the tree .
each unique extension is checked for canonical augmentation , line 18 , using algorithm 2 , or algorithm 3 in case prescribed substructures were provided .
if this extension is successful , the function generate is called , line 19 of algorithm 1 , and the molecule we want to continue extending is passed as a parameter .
when a molecule cannot be extended any further , the recursion is terminated and the program backtracks in the search tree .
input and output the minimum input required is the elemental composition of the structures that have to be generated .
optionally , a structure - data file ( sdf ) can be provided containing one or more prescribed substructures that we want our output molecules to contain .
since omg does not take hydrogen atoms into account during the generation of intermediate chemical structures , the hydrogen atoms present in the substructures will be removed before the generation process begins .
these substructures should be non - overlapping , i.e. they should not share any atoms .
this limitation is due to the fact that our algorithm grows molecules by adding bonds and , if two atoms in different fragments were in fact the same atom , our algorithm would create bonds between those atoms , which would clearly lead to incorrect results .
in practice , multiple substructures can be available , but the user does not know if they overlap .
this limitation can be circumvented by using the largest substructure as constraint for the generation and the remaining substructures as a posterior filtering , only keeping the molecules with those substructures. by default , the structure generator returns the count of molecules it generated .
optionally , it can store all the molecules in an sdf file .
if prescribed fragments are provided , omg outputs only the molecules containing such fragments .
we have opted to use sdf as our input and output format , but via cdk , other formats can easily be implemented in omg .
data as mentioned in the introduction , the identification of the chemical structure of metabolites is one of the current bottlenecks of metabolomics .
in this sense , a structure generator can contribute to overcome this bottleneck , since it can provide candidate structures for an unknown metabolite .
therefore , metabolites appear to be a relevant family of compounds to test our structure generator .
a list of metabolites was selected and their elemental composition was compiled to evaluate the performance of our structure generator on different inputs .
the source of the compounds employed was the human metabolome database ( hmdb ) [ 34 ] , which contains almost 8,000 metabolites and is the most comprehensive database of human metabolites .
a study of the human metabolite space and the properties of the metabolites that occupy it , has been previously reported [ 28 ] .
the selection criteria were to include cyclic and acyclic compounds , of different molecular weights , and containing different chemical elements like c , o , n , p , and s. a first test set included metabolites with c , o , and h , chemical elements with one valence .
a second test set included metabolites with c,o,h and also chemical elements with multiple valences , like n , p , and s. furthermore , for some of these metabolites , several substructures were drawn and provided to the structure generator as additional input .
these substructures are easily identified by an expert from direct inspection of ms2 or msn experimental data .
the aim was to assess the importance of having fragment information to reduce the list of generated structures .
results and discussion structure generation from elemental formula the algorithm presented in this work , the open molecule generator , was tested and compared with the commercial structure generator , molgen .
both generators take resonance into account producing all the contributing structures .
as a result , the two resonant forms of benzene will be considered as different molecules .
both omg and molgen are not limited to acyclic structures [ 35,36 ] , thus the two structure generators tested can generate molecules with rings .
furthermore , both tools generate molecules containing common chemical elements present in metabolites , like c , o , n , h , p , and s , and are not limited to only 4 chemical elements [ 36 ] .
both structure generators generate molecules for a given elemental composition by exhaustively producing all non - redundant chemical structures .
the number of molecules produced after using the elemental compositions of a diverse selection of metabolites containing only c , o and h , is presented in table 2 .
for all these metabolites , the same number of molecules is generated by both generators .
while both generators produce complete results , molgen does it in less time .
the time between initialization and finalization was measured using time functions in java for omg and equivalent functions in python for molgen .
we can observe in table 2 the time in seconds to generate all the candidate structures and the time to generate each molecule in milliseconds .
if we look at time per molecule , molgen is 4 times faster than omg for small molecules like pyruvic acid .
for larger molecules molgen obtains a constant time per molecule between 0.008 and 0.009 milliseconds , while omg ranges from 18 to 45 milliseconds depending on the elemental composition .
lightweight profiling of omg was performed using visualvm ( version 1.3.4 ) , in order to have an understanding of the limiting points in the performance of omg .
the most relevant finding was that the canonization process , which uses nauty , took half of the total running time .
table 2 number of chemical structures generated by omg and molgen using as input only the elemental compositions of metabolites containing c,o and h elements structure name hmdb id elemental composition molgen omg # candidate structures time ( s ) time per molecule ( ms ) # candidate structures time ( s ) time per molecule ( ms ) pyruvic acid hmdb00243 c3h4o3 152 0.129 0.849 152 0.509 3.349 malic acid hmdb00156 c4h6o5 8,070 0.222 0.028 8,070 27.074 3.355 d - xylose hmdb00098 c5h10o5 18,092 0.332 0.018 18,092 125.783 6.952 d - fructose hmdb00660 c6h12o6 267,258 2.381 0.009 267,258 5,035.371 18.841 sedoheptulose hmdb03219 c7h14o7 4,106,823 38.945 0.009 4,106,823 186,248.085 45.351 pectin hmdb03402 c6h10o7 3,183,337 26.512 0.008 3,183,337 46,320.522 14.551 galactonic acid hmdb00565 c6h12o7 767,569 6.957 0.009 767,569 22,475.987 29.282 galactaric acid hmdb00639 c6h10o8 8,568,129 78.354 0.009 8,568,129 186,730.365 21.794 cholic acid hmdb00619 c24h40o5 * more than 2,147,483,646 * not available * not available * more than 2,147,483,646 * not available * not available phenyllactic acid hmdb00779 c9h10o3 48,496,265 404.052 0.008 ** more than 48,496,265 ** not available ** not available * results were not generated due to excessive computational time needed to generate all the candidate structures .
however , we expect omg to generate more molecules than molgen , due to the larger amount of atom types produced by omg .
** results were not generated due to excessive computational time needed to generate all the candidate structures .
we observed that molgen stops the generation of molecules after two billion molecules , as it can be observed for a large molecule like cholic acid ( table 2 ) .
since both generators produce the same molecules for elemental composition with c , o and h , we can only assume that more than two billion molecules could be generated .
in the case of phenyllactic acid , molgen produces more than 48 million molecules in 404 seconds .
due to excessive computational time , no results for this elemental composition are reported for omg , though the same number of molecules is expected ( if executed for enough time ) as is the case for all the other elemental compositions in this subset .
as stated in methods , both generators treat atoms having multiple valences in different ways , this is the reason to use a second set of molecules containing also n , p and s. the default valences used by molgen for n is 3 , for p is 3 , and for s is 2 , unless stated otherwise .
the results for these molecules are presented in table 3 .
as expected , the number of candidate structures differs between both generators .
for the elemental composition of glycine , molgen produces 84 molecules only with n valence 3 and 162 molecules only with n valence 5 .
for the same elemental composition , omg produces 97 molecules with valence 3 and 5 for n , which include the 84 of molgen n valence 3 and 13 additional molecules with valence 5 , containing n with the atom types depicted in table 1 for omg - cdk .
the difference in the number of candidate structures is larger for elemental compositions containing many atoms with multiple valences , as is the case of creatinine .
for this metabolite , molgen generates 93,323 candidate structures with the default valence 3 for n. on the contrary , omg produces 303,601 candidate structures , containing n valence 3 and 5 .
table 3 number of chemical structures generated by omg and molgen using as input only the elemental compositions of metabolites containing c , o , h , n , p and s elements structure name hmdb id elemental composition molgen omg # candidate structures time ( s ) time per molecule ( ms ) # candidate structures time ( s ) time per molecule ( ms ) glycine hmdb00123 c2h5no2 n _ 3 84 0.118 1.405 97 0.452 4.660 n _ 5 162 0.120 0.741 acetyl - hmdb00532 c4h7no3 18,469 0.282 0.015 26,530 126.117 4.754 phenylalanine hmdb00159 c9h11no2 277,810,163 2227.796 0.008 * more than 277,810,163 * not available * not available glutamic acid hmdb00148 c5h9no4 440,821 2.945 0.007 685,392 12,348.456 18.017 phosphoenolpyruvic acid hmdb00263 c3h5o6p p _ 3 51,323 0.562 0.011 83,977 761.378 9.067 p _ 5 129,421 1.398 0.011 creatinine hmdb00562 c4h7n3o 93,323 0.933 0.010 303,601 3,921.157 12.915 guanidinoacetic acid hmdb00128 c3h7n3o2 45,626 0.585 0.013 124,808 1,962.532 15.724 cytosine hmdb00630 c4h5n3o 108,769 1.149 0.011 491,299 3,952.098 8.044 uric acid hmdb00289 c5h4n4o3 464,899,034 3488.097 0.008 * more than 464,899,034 * not available * not available histamine hmdb00870 c5h9n3 46,125 0.631 0.014 134,278 3,566.544 26.561 d - cysteine hmdb03417 c3h7no2s 3,838 0.156 0.041 15,978 131.004 8.199 p - cresol sulfate hmdb11635 c7h8o4s s _ 6 5078.132 0.009 * more than 82,000,000 * not available * not available 592,625,133 * results were not generated due to excessive computational time needed to generate all the candidate structures .
we expect omg to generate more molecules than molgen , due to the larger amount of atom types produced by omg .
in the case of phosphoenolpyruvic acid , we require p valence 5 to be considered .
on the one hand , running molgen with the default valence for p yields 51,323 candidate structures but the correct molecule is missing .
on the other hand , forcing the valence of p to be 5 , returns 129,421 candidate structures , with the correct molecule also produced but also an excessive quantity of unrealistic molecules due to unrealistic atom types for p. alternatively , omg generates 83,977 candidate structures with p valence 3 and 5 , including the desired molecule , where all of them are valid molecules as defined by the cdk atom dictionary .
we observe in table 3 that the running time per generated molecule now ranges between 0.008 and 0.041 milliseconds , while omg requires between 4.8 and 26.6 milliseconds .
such difference in execution speed between molgen and omg makes that for some large elemental compositions , only results are reported for molgen .
this is the case of phenylalanine , uric acid and p - cresol sulfate .
however , for these metabolites , we assume that the number of candidate structures would have been higher with omg than the one reported by molgen using the default valences .
structure generation from elemental formula and prescribed substructures structure generation is a combinatorial problem where the number of output molecules grows exponentially with to the number of input atoms .
when using one or more prescribed substructures as input to the generators in addition to elemental composition , less candidate structures are obtained ( table 4 ) .
whereas molgen can only accept one substructure , omg can accept multiple substructures as input with the constraint that these do not overlap , i.e. , they should not share any atom .
phenylalanine is a good example how the number of generated structures can be reduced by using more prescribed substructures , as will be discussed below in more detail .
table 4 number of chemical structures generated by omg and molgen using as input an elemental composition and one or more prescribed and non - overlapping fragments structure name hmdb id elemental composition prescribed substructure ( s ) molgen omg # candidate structures time ( s ) time per molecule ( ms ) # candidate structures time ( s ) time per molecule ( ms ) glycine 6 0.167 27.833 6 0.539 89.833 hmdb00123 c2h5no2 d - cysteine 100 0.193 1.930 210 3.177 15.129 hmdb03417 c3h7no2s phenylalanine 76,247 52.774 0.692 107,155 19386.019 180.916 hmdb00159 c9h11no2 * not possible * not possible * not possible 595 271.809 456.822 * not possible * not possible * not possible 289 172.655 597.422 * not possible * not possible * not possible 26 25.147 967.192 cholic acid ** not possible ** not possible * not possible 334 120.519 360.835 hmdb00619 c24h40o5 * not possible * not possible * not possible 2,505 119.418 47.672 malic acid 1,436 0.229 0.159 1,436 4.688 3.265 hmdb00156 c4h6o5 uric acid 150,114 962.016 6.409 6,069,863 155828.437 25.672 hmdb00289 c5h4n4o3 phenyllactic acid 21,040 15.674 0.745 26,164 163.904 6.264 hmdb00779 c9h10o3 * not possible * not possible * not possible 525 3.973 7.568 p - cresol sulfate s _ 6 13,177 65.667 4.983 13,177 63.047 4.785 hmdb11635 c7h8o4s s _ 6 70,330 94.898 1.349 17,232 1204.357 69.891 * molgen can only accept one prescribed substructure , while omg accepts multiple substructures , provided that these do not overlap , this is , they do not share any atom .
** molgen is not able to generate molecules using this large substructure as input .
the reason could not be found .
substructure information is of great relevance for metabolomics experiments involving msn data , where often the only information available of an unknown metabolite that needs to be identified is the elemental composition and in some cases substructures .
provided that no database entries exist for this experimental information , one is forced to generate the structures via case .
the inclusion of substructure information brings the list of candidate structures to a manageable size .
for p - cresol sulfate , using the sulfate group with both generators as prescribed substructure , produces 13,177 molecules .
when benzene is the prescribed substructure , omg generates 17,232 candidate structures and molgen 70,330 , all containing sulfur with valence 6 , hence the difference between both generators .
whereas only the elemental composition of phenylalanine as input generates 277 million structures with molgen and for omg an even higher number of candidate structures is expected as both nitrogen valences of 3 and 5 are taken into account ( table 3 ) , using benzene as a substructure provides only 107,155 ( omg ) and 76,247 ( molgen ) candidate structures ( table 4 ) .
the number of generated molecules for the elemental composition of phenylalanine is even further reduced by prescribing multiple fragments as input : omg outputs 595 molecules when provided with two fragments and 289 molecules for three fragments ( table 4 ) .
the use of large fragments yields the larger reduction in output molecules , as it can be seen for the last example of phenylalanine , where two big fragments describe most of its structure and return only 26 chemical structures .
for larger molecules containing ten or more carbon atoms , which is a common situation in chemistry , it is not practical for the identification of metabolites to exhaustively generate candidate structures without using substructure constraints , with molgen and omg , due to the large number of results .
using the elemental composition of a large metabolite like cholic acid , both structure generators cannot produce all possible candidate structures , which are expected in the order of billions .
this was only possible using substructure information to reduce the size of the search tree : when providing a substructure that describes a large part of the molecule , omg generates only 334 structures ( table 4 ) .
when using two substructures , omg returned 2,505 candidate structures .
however , molgen was unable to return results using the same large substructure or two substructures as an input and the reason could not be found by us. the use of prescribed substructures affected the running time of both generators .
for molgen , the time per molecule ranged between 0.16 and 27.8 milliseconds , which represents in some cases a 10,000 - fold increase in computation time compared to using only elemental compositions .
concerning omg , the time per molecule ranged between 3.3 and 967 .
2 milliseconds , a 100 - fold increase in running time .
despite this deterioration of execution time , the advantage of using one or ideally multiple prescribed substructures is clear : the number of candidate substructures is significantly reduced and the total time to calculate candidate structures is also reduced compared to not using any substructure .
the results here presented show that if we want molgen to generate the correct molecule when the valence of some atoms is not the default one , like phosphoenolpyruvic acid or p - cresol sulfate , we need to know the valence in advance .
otherwise , molgen should be executed using all possible valences for all atoms .
this limitation is not present in omg , which can produce different valences in the same execution .
unfortunately , the atom dictionary provided by cdk is not comprehensive concerning non - standard valences .
on the positive side , the dynamic open source community of cdk keeps adding new atom types with each release of the library and we expect that this will improve the capabilities of omg .
this open source nature of cdk allows users to suggest or implement new atom types .
the generation of the molecules in the open molecule generator has the shape of a tree .
as stated by mckay [ 23 ] , the check for canonical augmentation is branchindependent , which would allow to process branches of the generation trees in parallel .
theoretically the algorithm allows for parallelization , in practice this has not been implemented but it is one future extension of this work .
however , we have observed that omg is in most of the cases slower than molgen and this fact was more noticeable when generating millions of candidate molecules .
the speed of omg could be improved and we see several possibilities to achieve this , i.e. the use of a different canonizer or a less computationally demanding canonicity test for intermediate chemical structures , could significantly speed up the execution .
actually , obtaining millions of molecules as a result , quickly or slowly , is not desirable , but ideally , the goal of metabolite identification is to obtain a list of candidate structures that is short in order to examine it and find the structure belonging to the unknown metabolite .
exhaustive profiling , covering both on execution time and memory use , would be beneficial to discover improvement points for omg .
fortunately , omg allows multiple prescribed substructures and can handle large fragments , which reduced the number of generated molecules significantly .
handling multiple substructures allows omg to provide a short list of candidate structures and additionally , its open source nature permits users to implement specific constraints to further reduce the candidate list , both during and after the generation process .
examples of such constraints would reject intermediate chemical structures with high steric energy values or other physicochemical properties .
therefore we expect omg to be useful in different application areas and its functionality to be extended in the near future .
conclusion in this work we have presented the open molecule generator , to the best of our knowledge , the first implementation to chemical structure generation of the canonical path augmentation approach , originally designed for simple graph enumeration adding vertices .
we have adapted it to generate organic chemical structures and extended so that ( i ) it grows molecules by adding bonds , ( ii ) it can handle multigraphs , and ( iii ) accepts one or multiple non overlapping prescribed substructures .
in addition , this is the first open source implementation of a deterministic structure generator .
this will enable future developments like parallelization or the inclusion of constraints that are specific to the class of compounds being generated .
our results show that the implementation of our algorithm generates all possible and valid chemical structures for a given elemental composition and optionally prescribed substructures .
it is as complete as the best commercially available generator .
moreover , the current implementation of the omg program presents an extra advantage over existing generators when large or multiple fragments are available to be used as constraints : we have demonstrated the benefit of incorporating constraints to reduce the number of output molecules significantly .
the ability of omg to generate multiple valences for an atom has proven to be useful as often no prior information is known on the desired chemical elements and multiple valences of an element can be present in a molecule .
when compared to molgen , the only disadvantage of omg is its speed , which is more severe when using only elemental compositions and less when including prescribed substructures .
this issue will be addressed in future improvements of the program .
we expect this tool to be used in various fields , one of them being metabolomics , where there is a clear need for flexible structure generators .
we have successfully used omg to propose candidate structures using prescribed substructures , in several on - going metabolite identification projects in our lab .
availability and requirements project name : openmg project home page : http :// sourceforge.net / p / openmg operating system : linux 64bits , linux 32bits , mac os x programming languages : java , c other requirements ( if compiling ) : license : gnu agpl v3 any restrictions to use by non - academics : none other than those specified by the license algorithms 1 : generate ( m ) 2 : if saturated ( m ) and are _ all _ h _ used ( m ) 3 : if connected _ fragments ( m ) == 1 4 : store _ to _ file ( m ) 5 : nmols = nmols + 1 6 : if degree ( m ) < max _ degree ( m ) 7 : generate ( m ) 8 : endif 9 : endif 10 : else 11 : new map 12 : list _ of _ bonds = extend ( m ) 13 : foreach bond in list _ of _ bonds 14 : m ' = add _ bond ( bond,m ) 15 : canonm ' = canonize ( m ') 16 : if not is _ present ( map,canonm ') 17 : add ( map,canonm ') 18 : if is _ canonical _ augmentation ( canonm ' , m ' , m ) 19 : generate ( m ') 20 : endif 21 : endif 22 : end 23 : endif 24 : end algorithm 1 1 : is _ canonical _ augmentation ( canonm ' , m ' , m ) 2 : last _ bond = get _ last _ bond ( canonm ') 3 : m " = remove _ bond ( m ' , last _ bond ) 4 : return are _ the _ same ( m " , m ) 5 : end algorithm 2 1 : is _ canonical _ augmentation _ fragments ( canonm ' , m ' , m ) 2 : last _ bond = get _ last _ bond ( canonm ') 3 : while bond _ belongs _ to _ fragment ( last _ bond , canonm ') 4 : last _ bond = get _ previous _ bond ( canonm ') 5 : endwhile 6 : m " = remove _ bond ( m ' , last _ bond ) 7 : return are _ the _ same ( m " , m ) 8 : end algorithm 3 competing interests the authors declare that they have no competing interests .
authors' contributions jep designed and implemented the software , and drafted most of the manuscript .
mrc and df contributed to the implementation of the software .
jlf contributed to the design of the algorithm and supervised specific parts of the project .
tr , lc and th supervised specific parts of the project , fed it with new ideas , and participated in testing the software .
all authors approved the final manuscript .
acknowledgements this study was financed by the research programme of the netherlands metabolomics centre ( nmc ) which is a part of the netherlands genomics initiative / netherlands organization for scientific research .
jean - loup faulon and davide fichera were financed by a genopole atige and a anr chair of excellence grant .
we thank m. m. jaghoori for his contributions to the discussions to improve our algorithm .
kind t fiehn o advances in structure elucidation of small molecules using mass spectrometry bioanal rev 2010 2 23 60 10.1007 / s12566 - 010 - 0015 - 9 21289855 lindsay rk buchanan bg feigenbaum ea lederberg j applications of artificial intelligence for organic chemistry : the dendral project 1980 new york : mcgraw - hill book carhart re smith dh gray nab nourse jg djerassi c genoa : a computer program for structure elucidation utilizing overlapping and alternative substructures j org chem 1981 46 1708 1718 10.1021 / jo00321a037 funatsu k miyabayaski n sasaki s further development of structure generation in the automated structure elucidation system chemics j chem inf model 1988 28 18 28 10.1021 / ci00057a003 badertscher m korytko a schulz k - p madison m munk me portmann p junghans m fontana p pretsch e assemble 2.0 : a structure generator chemom intell lab syst 2000 51 73 79 10.1016 / s0169 - 7439 ( 00 ) 00056 - 3 molchanova ms shcherbukhin vv zefirov ns computer generation of molecular structures by the smog program j chem inf model 1996 36 888 899 10.1021 / ci950393z kerber a laue r gruner t meringer m molgen 4.0 .
match communications math comput chem 1998 37 205 208 ley sv doherty k massiot g nuzillard jm connectivist approach to organic structure determination .
lsd - program assisted nmr analysis of the insect antifeedant azadirachtin tetrahedron 1994 50 12267 12280 10.1016 / s0040 - 4020 ( 01 ) 89576 - 4 steinbeck c seneca : a platform - independent , distributed , and parallel system for computer - assisted structure elucidation in organic chemistry j chem inf comput sci 2001 41 1500 7 10.1021 / ci000407n 11749575 steinbeck c han y kuhn s horlacher o luttmann e willighagen e the chemistry development kit ( cdk ) : an open - source java library for chemo - and bioinformatics j chem inform comput sci 2003 43 493 500 steinbeck c hoppe c kuhn s floris m guha r willighagen el recent developments of the chemistry development kit ( cdk ) - an open - source java library for chemo - and bioinformatics curr pharm des 2006 12 2111 2120 10.2174 / 138161206777585274 16796559 nielsen j oliver s the next wave in metabolome analysis trends biotechnol 2005 23 544 6 10.1016 / j.tibtech.2005.08.005 16154652 scalbert a brennan l fiehn o hankemeier t kristal bs van ommen b pujos - guillot e verheij e wishart d wopereis s mass - spectrometry - based metabolomics : limitations and recommendations for future progress with particular focus on nutrition research metabolomics 2009 5 435 458 10.1007 / s11306 - 009 - 0168 - 0 20046865 dunn wb broadhurst d begley p zelena e francis - mcintyre s anderson n brown m knowles jd halsall a haselden jn nicholls aw wilson id kell db goodacre r procedures for large - scale metabolic profiling of serum and plasma using gas chromatography and liquid chromatography coupled to mass spectrometry nat protoc 2011 6 1060 1083 10.1038 / nprot.2011.335 21720319 mohamed r varesio e ivosev g burton l bonner r hopfgartner g comprehensive analytical strategy for biomarker identification based on liquid chromatography coupled to mass spectrometry and new candidate confirmation tools anal chem 2009 81 7677 94 10.1021 / ac901087t 19702294 zhang t creek dj barrett mp blackburn g watson dg evaluation of coupling reversed phase , aqueous normal phase , and hydrophilic interaction liquid chromatography with orbitrap mass spectrometry for metabolomic studies of human urine analytical chemistry 2012 84 1994 2001 10.1021 / ac2030738 22409530 schymanski el meinert c meringer m brack w the use of ms classifiers and structure generation to assist in the identification of unknowns in effect - directed analysis anal chim acta 2008 615 136 147 10.1016 / j.aca.2008.03.060 18442519 schymanski el meringer m brack w automated strategies to identify compounds on the basis of gc / ei - ms and calculated properties anal chem 2011 83 903 912 10.1021 / ac102574h 21226466 colbourn c read r orderly algorithms for graph generation int j comput math 1979 7 167 172 10.1080 / 00207167908803169 faradzev ia constructive enumeration of combinatorial objects problemes combinatoires et theorie des graphes 1978 orsay : university of paris 131 135 faulon j - l stochastic generator of chemical structure .
1. application to the structure elucidation of large molecules j chem inf model 1994 34 1204 1218 10.1021 / ci00021a031 kerber a laue r group actions , double cosets , and homomorphisms : unifying concepts for the constructive theory of discrete structures acta applicandae mathematicae 1998 52 63 90 10.1023 / a : 1005998722658 mckay b isomorph - free exhaustive generation j algorithm 1998 26 306 324 10.1006 / jagm.1997.0898 fink t reymond j - l virtual exploration of the chemical universe up to 11 atoms of c , n , o , f : assembly of 26.4 million structures ( 110.9 million stereoisomers ) and analysis for new ring systems , stereochemistry , physicochemical properties , compound classes , and drug discove j chem inf model 2007 47 342 53 10.1021 / ci600423u 17260980 blum lc reymond j - l 970 million druglike small molecules for virtual screening in the chemical universe database gdb - 13 j am chem soc 2009 131 8732 8733 10.1021 / ja902302h 19505099 chen wl chemoinformatics : past , present , and future j chem inf model 2006 46 2230 55 10.1021 / ci060016u 17125167 rojas - cherto m peironcely je kasper pt van der hooft jjj de vos rch vreeken r hankemeier t reijmers t metabolite identification using automated comparison of high resolution msn spectral treessubmitted peironcely je reijmers t coulier l bender a hankemeier t understanding and classifying metabolite space and metabolite - likeness plos one 2011 6 e28966 10.1371 / journal.pone.0028966 22194963 mckay bd nauty user 's guide ( version 2.4 ) 2009 braun j gugisch r kerber a laue r meringer m rucker c molgen - cid - a canonizer for molecules and graphs accessible through the internet j chem inform comput sci 2004 44 542 8 faulon j - l collins mj carr rd the signature molecular descriptor .
4. canonizing molecules using extended valence sequences j chem inf comput sci 2004 44 427 36 10.1021 / ci0341823 15032522 iupac international chemical identifier ( inchi ) technical manualhttp :// www.inchi - trust.org / sites / default / files / inchi - 1.04 / inchi _ techman.pdf foggia p sansone c vento m a performance comparison of five algorithms for graph isomorphism 3rd iapr tc - 15 workshop on graph - based representations in pattern recognition 2001 188 199 wishart ds knox c guo ac eisner r young n gautam b hau dd psychogios n dong e bouatra s mandal r sinelnikov i xia j jia l cruz ja lim e sobsey ca shrivastava s huang p liu p fang l peng j fradette r cheng d tzur d clements m lewis a souza ad zuniga a dawe m xiong y clive d greiner r nazyrova a shaykhutdinov r li l vogel hj forsythe i hmdb : a knowledgebase for the human metabolome nucleic acids res 2009 37 d603 610 10.1093 / nar / gkn810 18953024 fujiwara h wang j zhao l nagamochi h akutsu t enumerating treelike chemical graphs with given path frequency j chem inf model 2008 48 1345 57 10.1021 / ci700385a 18588284 imada t ota s nagamochi h akutsu t efficient enumeration of stereoisomers of tree structured molecules using dynamic programming j math chem 2011 49 910 970 10.1007 / s10910 - 010 - 9789 - 9