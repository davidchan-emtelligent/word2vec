bmc bioinformatics bmc bioinformatics 1471 - 2105 biomed central london 17683637 1963340 1471 - 2105 - 8 - 292 10.1186 / 1471 - 2105 - 8 - 292 software rmotifgen : random motif generator for dna and protein sequences rouchka eric c 1 eric.rouchka @ louisville.edu hardin c timothy 1 tim.hardin @ louisville.edu 1 department of computer engineering and computer science , university of louisville , louisville , ky 40292 , usa 2007 7 8 2007 8 292 292 19 3 2007 7 8 2007 copyright ( c ) 2007 rouchka and hardin ; licensee biomed central ltd .
2007 rouchka and hardin ; licensee biomed central ltd .
this is an open access article distributed under the terms of the creative commons attribution license () , which permits unrestricted use , distribution , and reproduction in any medium , provided the original work is properly cited .
background detection of short , subtle conserved motif regions within a set of related dna or amino acid sequences can lead to discoveries about important regulatory domains such as transcription factor and dna binding sites as well as conserved protein domains .
in order to help assess motif detection algorithms on motifs with varying properties and levels of conservation , we have developed a computational tool , rmotifgen , with the sole purpose of generating a number of random dna or protein sequences containing short sequence motifs .
each motif consensus can be user - defined , randomly generated , or created from a position - specific scoring matrix ( pssm ) .
insertions and mutations within these motifs are created according to user - defined parameters and substitution matrices .
the resulting sequences can be helpful in mutational simulations and in testing the limits of motif detection algorithms .
results two implementations of rmotifgen have been created , one providing a graphical user interface ( gui ) for random motif construction , and the other serving as a command line interface .
the second implementation has the added advantages of platform independence and being able to be called in a batch mode .
rmotifgen was used to construct sample sets of sequences containing dna motifs and amino acid motifs that were then tested against the gibbs sampler and meme packages .
conclusion rmotifgen provides an efficient and convenient method for creating random dna or amino acid sequences with a variable number of motifs , where the instance of each motif can be incorporated using a position - specific scoring matrix ( pssm ) or by creating an instance mutated from its corresponding consensus using an evolutionary model based on substitution matrices .
rmotifgen is freely available at : . background detection of short , subtle conserved regions within a set of related sequences can be beneficial in determining biologically important regulatory elements such as transcription factor and dna binding sites , and conserved protein domains .
over 30 software solutions have been published with the underlying goal of detecting subtle , conserved motif sequences within a set of related sequences [ 1 ] , including implementations using gibbs sampling routines [ 2 - 9 ] , expectation - maximization ( em ) [ 10 - 12 ] , particle swarm optimization ( pso ) [ 13 ] and a variety of other methods [ 12,14 - 20 ] .
motif detection algorithms are known to be limited , producing accuracies on the order of 15 - 25 % at the nucleotide level , and 25 - 35 % at the binding site level [ 1 ] .
despite the large number of detection algorithms and high levels of inaccuracy , only a limited number of assessments of motif discovery tools have been performed [ 21,22 ] .
tompa et al .
[ 22 ] describe the creation of a dna benchmarking dataset using the binding sites of known promoter sequences from the transfac database [ 23 ] along with dna motifs creating using a markov chain .
creation of this dataset is critically important for the assessment of motif detection approaches .
however , the benchmark dataset is limited only to dna sequences , and those randomly created are done so using a stochastic approach rather than one directed by a mutational model .
rmotifgen has been developed as a solution to test various aspects of these limitations by creating simulated dna and protein sequences where the motifs within the amino acid sequences are allowed to mutate according to a substitution matrix model .
a number of different approaches for generating random biological sequences have previously been presented .
the majority of these programs have focused on generating random sequences for the purpose of simulating evolution through mutation events [ 24 - 26 ] or by emitting sequences to resemble those from a particular statistical model .
more recently , the program genrgens [ 27 ] describes a software tool that can expand upon these by incorporating structure into random sequences using context - free grammars and regular expressions .
while each of these approaches is adequate in simulating sequence events on a whole sequence level , a solution has not previously been described to generate completely random sequences that contain regions of similar signals within them .
rmotifgen addresses this need by providing a method for randomly creating dna or amino acid sequences using a simple background model , and then introducing into these sequences subtle motifs .
rmotifgen allows for each of the motifs to be incorporated into the individual sequences with different probabilities .
in addition , each motif instance is allowed to mutate from the consensus within each sequence using substitution matrix models and pssms .
implementation user input rmotifgen generates random motifs and sequences based upon two levels of user inputs .
the first level requires the user to declare the length , number , and type of sequences ( dna or amino acid ) , as well as the number of different motifs to create .
based upon the sequence type , the user must provide a background frequency for each residue to create the random sequences .
these frequencies are treated as proportionate , which are normalized to one in order to be further considered as percentages .
once the user has entered the first level of overall information , the user is then required to provide the properties for each motif , which can be based on a user - entered consensus , randomly generated sequence , or pssm .
residue frequencies for each randomly generated consensus must be provided .
as a result , the user can provide such information as an amino acid region that is hydrophobic or hydrophilic in nature .
random dna motifs can be designed to maintain reverse complementary palindromic properties .
two versions of rmotifgen are provided depending on the needs of the user .
the first is a command line interface developed using ansi g ++ that should be portable to any operating system .
the second is a gui developed using visual studio ( r ) 2005 c # that has been tested extensively on windows ( r ) xp. user inputs will be handled differently based upon which version is being used .
command line mode the command line version of rmotifgen version 3.0 is distributed as a gzipped tarball file consisting of four . h header files and four . cpp implementation files .
development of the command line version has proceeded to provide researchers with the ability to use rmotifgen on a variety of computing platforms in an interactive environment and also to allow for creation of input via files so that rmotifgen can be called from batch scripts .
interactive mode once the executable for rmotifgen has been created , the interactive mode can be invoked by typing rmotifgen at the command line prompt without any parameters .
the user is prompted for each of the overall inputs one at a time via the console , followed by the individual parameters for each motif .
the resulting random sequences can be output either to a specified file or to the console , depending on the user 's desire .
batch mode simulations are often very useful to study the behavior patterns of algorithms .
this is true as well for motif detection algorithms .
setting up a large number of variable inputs for each of the algorithms may be desired .
as a result , the command line version of rmotifgen allows users to read motif parameters from input files that can be automatically generated .
this allows rmotifgen to be callable from within a shell script to efficiently design random sequences containing motifs of different composition .
the batch mode is invoked with the usage : rmotifgen [ p | n ] - f < filename > where p signifies that the random sequences generated will be protein sequences and n signifies they will be amino acid sequences .
filename refers to the name of the file where the input data is stored .
the input filename is structured using boulder data interchange format [ 28 ] which formats the data in a tag = value format that can be easily parsed .
two sample input files are provided in the tarball , dnainput.dat for an example of how to create the file for dna sequences and aainput.dat for amino acid sequences .
since the input originates from a file , and the output can be written to a file , the batch mode allows for the possibility of creating a large number of random sequences for simulation purposes .
gui mode an initial screen prompting the user for overall sequence properties first pops up when run in gui mode ( figure 1 ) .
the user must provide the initial background frequencies for the desired sequence type .
defaults for dna sequences are 25 % for each residue .
for amino acid sequences , the background frequency of each amino acid is set according to the observed frequencies within the swiss - prot database [ 29 ] release 52.0 .
when the user presses the " continue " button , s / he is prompted to enter in the details for each motif consensus to be generated ( figure 2 ) .
in this screen , a decision can be made as to whether the consensus is created based on a user - defined sequence , position specific scoring matrix , or if it will be created randomly .
in the case that it that it is randomly generated , the user will provide the residue frequencies for motif generation .
this allows motifs to be constructed based on a number of different properties .
if the motif is a dna sequence , it can additionally be constrained to be a palindrome .
each randomly generated sequence can have zero or one occurrence of the motif , which is incorporated by the specified percentage of sequences in which it is contained .
two or more occurrences of the same motif into each sequence can be incorporated by adding duplicate records for the same motif .
the level of conservation between the consensus motif and each randomly generated instance is provided .
in the case where the consensus is not defined by a pssm , dna sequences use a straight - forward percent conservation of the consensus to determine the sequence for each motif occurrence , while amino acid sequences are generated from the consensus based on the provided pam substitution matrix model [ 30 ] .
the larger the number is for the pam , the more divergent the motifs will be. a pam of 0 can be used if complete conservation is desired .
when the motif parameters are set , the user presses the " generate sequences " button which creates the sequences and presents them in a formatted output screen ( figure 3 ) where they can be copied to the clipboard or saved to a file .
figure 1 initial input screen for rmotifgen .
this screen illustrates an example where the user will be generating amino acid sequences .
the default background frequencies presented to the user are based upon the observed residue frequencies in the swiss - prot database release 52.0 [ 29 ] .
figure 2 motif description page .
in this screen , the user will be allowed to specify the parameters for each motif , including a description of whether it is random or user - defined , what sort of conservation each instance will have to the consensus , what percentage of sequences will have the motif , and the background composition ( if the motif is randomly generated ) .
figure 3 resulting random sequences .
this screen shows the consensus motifs and the resulting random sequences .
each of the motif instances can be highlighted and the sequences can be copied or saved to a file .
random sequence generation for both the gui and command line interfaces , the sequences are randomly generated based upon the background residue frequencies .
in order to make rmotifgen more robust , the frequencies entered are not required to sum to either 1 or 100 .
rather , they are treated as ratios which are subsequently normalized .
each position within the sequence is treated as a completely separate entity .
for the command line interface , the ansi standard drand48 family of pseudo - random number generators is used .
after the sequences have been randomly generated , consensus motifs are created .
these can either be set according to the user - defined consensus pattern or randomly generated based upon the motif residue frequencies .
each random sequence is then considered to determine whether or not it will contain an instance of the current motif .
if the motif is selected for inclusion , the background sequence is examined to see which sites are available for the motif position such that two motifs are not overlapping in order to prevent truncated motifs .
the current version of rmotifgen does not allow for overlapping motifs , but does allow for them to be randomly ordered .
the motif instance is then created using the model of conservation provided , via a pam lookup table , pssm , or by a percent conservation variable .
output each random sequence is presented in fasta file format .
the descriptor line begins with a '>' followed by an identifier rmotifgen _ randseq _< seqnum > which uniquely identifies the sequence .
the remainder of the header contains the number of motifs created , followed by each individual beginning location .
if a motif is omitted , its positional value is - 1 .
the remainder of the fasta file is the actual sequence data .
figure 3 illustrates an example fasta sequence .
results a sample amino acid sequence set of ten sequences of length 500 residues with six allowed motifs per sequence was generated from rmotifgen .
background residue frequencies for the data set was taken from the observed amino acid frequencies in swiss - prot [ 29 ] release 52.0 dated 06 - mar - 07 [ 28,31 ] .
the first motif consensus , lydvaeyagvsyqtvsrvv , was entered in as a helix - turn - helix ( hth ) motif from e. coli lactose operon repressor lac1 [ 32 ] .
the second and third consensuses were randomly generated , where the motif residue frequencies were heavily weighted towards hydrophobic and hydrophilic amino acids , respectively .
the fourth motif consensus , dvyyispqgkkfrskpq , represents a partial region from the methyl cpg binding domain ( mbd ) extracted from prosite [ 33 ] entry pdoc50982 .
the fifth consensus , vcvhqacygilkv , was taken from the multiple alignment for the plant homeodomain ( phd ) type zinc finger ( prosite entry pdoc50016 ) .
the final motif was generated from a pssm for the outer membrane motif described in neuwald , et al .
[ 3 ] .
pam matrices used for each of these sequences were 10 , 100 , 200 , 20 , and 0 respectively , indicating that the second and third motifs are more likely to incorporate mutations , and the fifth motif is 100 % conserved from the consensus sequence .
note that since the sixth motif is pssm - generated , it does not have an associated pam matrix .
conservation of the motifs within each sequence was set to 100 % , 80 % , 100 % , 50 % , 70 % , and 75 % respectively , indicating the likelihood that each sequence contains each of the six motifs .
the resulting motifs generated are listed in table 1 , and their locations are listed in table 2 .
complete sequences are available [ see additional file 1 ] .
table 1 motifs for randomly generated sequences seq .
# motif 1 motif 2 motif 3 motif 4 motif 5 motif 6 cons .
lydvaeyagvsyqtvsrvv faivfvvaia kdknprndrr dyyispqgkkfrskpq vcvhqacygilkv pssm 1 lydvanyagvnyqtvprvv yvicfviqik gnkdmraqrq dyyispqgkkfrskpq - - dahyvrvnyrf 2 lydvaeyagvsyqtvsrtv yslpycltkf knnflpedrk gyyisphgkkfrskhq vcvhqacygilkv ktfylgagyry 3 lydvaeyagvsyqtvsrvv yalggliesa ndrsnrgkpw - - - vcvhqacygilkv kavyaglgvkf 4 lydvadyagvsyqavsrvv fdagfvlpat hgtksdktir - - - vcvhqacygilkv dqvtlgagmdf 5 lynvaeyigvsyntvsrvv aqivvclagg kekipkevrk - - - - - - dqyhasagykf 6 lydvaeyagvsyqtvsrvv fgivyvlana kdedlrnsrr dfyisaqgkkfrskpq vcvhqacygilkv rnwyvragydy 7 lydvaeyagvvyqtvskvv psmllfveia kdknnpnqss - - vcvhqacygilkv navyiglgvry 8 lydvaeyagvsyqtvsrvv ffvvfsvvit rqknaehdrr - - vcvhqacygilkv ktyhvglgfdy 9 lydvaeyngisyevvsrvv daiifannid meknlwderm dyyispqgkkfrvnpn vcvhqacygilkv dayyaragvdf 10 lydiaeyagvsyqtvsrvv famvigvsig gkkepryeqp dyyiwpkgkkfkskpq vcvhqacygilkv pnyhaglglry table 2 actual and predicted motif begin locations seq .
number motif 1 motif 2 motif 3 motif 4 motif 5 motif 6 r m g r m g r m g r m g r m g r m g 1 85 85 85 263 - - - - 164 - - - - 33 33 33 - - - - - - 215 215 - - 2 290 290 290 129 - - - - 106 - - - - 36 36 36 461 461 464 195 195 - - 3 332 332 332 286 - - - - 203 - - - - - - - - - - 354 354 357 93 93 - - 4 20 20 20 112 - - - - 74 - - - - - - - - - - 378 378 381 239 239 - - 5 150 150 150 26 - - - - 133 - - - - - - - - - - - - - - - - 170 170 - - 6 187 187 187 17 - - - - 455 - - - - 247 247 247 473 473 476 413 291 - - 7 334 334 334 461 - - - - 488 - - - - - - - - - - 394 394 397 80 80 - - 8 259 259 259 396 - - - - 163 - - - - - - - - - - 70 70 73 445 445 - - 9 197 197 197 330 - - - - 480 - - - - 443 443 443 314 314 317 397 397 - - 10 359 359 359 51 - - - - 337 - - - - 108 108 108 31 31 34 141 141 - - r : rmotifgen randomly assigned motifs ; m : meme assigned motifs ; g : gibbs sampler assigned motifs .
each of the start positions have been modified so that each sequence begins at 0 , to comply with rmotifgen .
sites incorrectly found are listed in a bold , italic font .
this includes the motif 5 positions found by the gibbs sampler which are offset by three bases rmotifgen can be used to create benchmark data sets for motif detection algorithms .
in order to demonstrate this capability , the test set described above was used as input into the meme web server [ 34 ] and the gibbs motif sampler [ 35 ] .
results for meme and gibbs sampler are found in table 2 .
meme had the parameters set for zero or one occurrence per sequence , and a total of six motifs to detect .
meme was able to locate the exact positions for each occurrence of motif one , four , and five while finding all but one occurrence of motif six ( table 2 ) .
however , meme was unable to locate motifs two and three in any part .
since meme was forced to find a total of six motifs , two additional patterns were found where each pattern had two occurrences ( results not shown ) [ see additional file 2 ] .
for the gibbs sampler , the number of motif patterns was set to six with motif widths of 10 , 10 , 12 , 17 , 19 , and 11 .
the estimated site count for each motif type was set to 10 .
the remaining parameters were left at the default values .
as table 2 indicates , the gibbs sampler was not as effective at locating the motif sites as meme .
gibbs found the exact locations for the motifs one and four , while find the locations with a three base offset for motif five .
gibbs was unable to find the occurrences for the motif patterns two , three and six .
an additional three motif patterns were found ( results not shown - see supplementary materials ) which do not correspond to either the meme patterns or the expected motif patterns .
results for the gibbs sampler are provided [ see additional file 3 ] .
discussion rmotifgen provides an effective method for constructing motifs in dna and amino acid sequences according to substitution matrices and pssms which have biological relevance .
one of the limitations to the current approach , however , is that the background residues are randomly chosen using a bernoulli methodology .
the implementation generates the random background sequences such that each of the sequences generated has the same residue distribution .
a more biologically relevant approach would be to assign each individual background sequence a distribution which takes into account a higher order sequence organization .
a model ( such as a hidden markov model approach ) which takes into account factors such as dinucleotide and hexamer frequencies for dna sequences would provide sequences more likely to occur in nature .
rmotifgen does not incorporate these higher order methodologies for the background sequences at this point in time in order to maintain a reasonable number of parameters ( each background sequence could potentially belong to a unique organism with a different underlying model ) , and since doing so may help create sequences that are in effect trained for a particular motif detection approach .
future releases will provide for more intelligent background sequence modeling .
conclusion detection of short , subtle motif signals within dna and amino acid sequences remains a difficult problem due to the fact that biological signals may not be highly conserved .
testing of motif detection approaches using benchmark standards is important .
our solution , rmotifgen , demonstrates that creation of random motif datasets under certain evolutionary constraints can be used to determine the limitations of motif detection algorithms. by providing both gui and command line versions , rmotifgen should be flexible to suit any desired need , including the construction of large scale sets for simulations .
availability and requirements rmotifgen can be accessed at : . two versions , one providing a graphical interactive environment , and the other serving as a more portable command line interface , are available .
in addition , an html form - based interface into the command line version is available at the above website .
the interactive version was developed using c # within visualstudio ( r ) 2005 on a windows ( r ) xp system .
the gui executable is freely available to all users .
microsoft 's ( r ) . net framework version 2.0 redistribution package ( x86 ) is required , and can be freely downloaded from . it has been tested on a windows ( r ) xp professional system , but should also run on any windows ( r ) system using windows ( r ) 98 or later .
distribution of the command line interface is accomplished under the gnu public license for all users .
it was developed using ansi c ++ , and should be portable to any system with an ansi c ++ compiler , such as gnu 's g ++ .
it has been fully tested using g ++ 4.0.2 on a system using suse ( r ) linux 10.0 .
abbreviations american national standards institute ( ansi ) , bioinformatics research group ( brg ) , expectation - maximization ( em ) , graphical user interface ( gui ) , helix - turn - helix ( hth ) , methyl cpg binding domain ( mbd ) , multiple expectation - maximization for motif elicitation ( meme ) , plant homeodomain ( phd ) , point accepted mutation ( pam ) , particle swarm optimization ( pso ) , position specific scoring matrix ( pssm ) authors' contributions ecr and cth worked together in the design and testing phase of software development .
ecr is the main author of the code .
both authors have read and approved this manuscript .
supplementary material additional file 1 rmotifgen - sample _ aa.fa. example randomly generated amino acid sequence file used in the manuscript .
click here for file additional file 2 meme - 21932.results.html .
resulting motif detection for the random sequences using meme .
click here for file additional file 3 gibbssampler.results .
resulting motif detection for the random sequences using the gibbs sampler .
click here for file acknowledgements this project was made possible by nih - ncrr grant p20rr - 16481 ( nigel cooper , pi ) and nih - niehs grant 1p30es014443 - 01a1 ( ken ramos , pi ) .
its contents are solely the responsibility of the authors and do not necessarily represent the official views of ncrr , niehs or nih .
the authors wish to thank members of the university of louisville bioinformatics research group ( brg ) for helpful discussions .
hu j li b kihara d limitations and potentials of current motif discovery algorithms nucleic acids res 2005 33 4899 4913 16284194 10.1093 / nar / gki791 lawrence ce altschul sf boguski ms liu js neuwald af wootton jc detecting subtle sequence signals : a gibbs sampling strategy for multiple alignment science 1993 262 208 214 8211139 10.1126 / science.8211139 neuwald af liu js lawrence ce gibbs motif sampling : detection of bacterial outer membrane protein repeats protein sci 1995 4 1618 1632 8520488 thompson w rouchka ec lawrence ce gibbs recursive sampler : finding transcription factor binding sites nucleic acids res 2003 31 3580 3585 12824370 10.1093 / nar / gkg608 favorov av gelfand ms gerasimova av ravcheev da mironov aa makeev vj a gibbs sampler for identification of symmetrically structured , spaced dna motifs with improved estimation of the signal length bioinformatics 2005 21 2240 2245 15728117 10.1093 / bioinformatics / bti336 frith mc hansen u spouge jl weng z finding functional sequence elements by multiple local alignment nucleic acids res 2004 32 189 200 14704356 10.1093 / nar / gkh169 hughes jd estep pw tavazoie s church gm computational identification of cis - regulatory elements associated with groups of functionally related genes in saccharomyces cerevisiae j mol biol 2000 296 1205 1214 10698627 10.1006 / jmbi.2000.3519 thijs g lescot m marchal k rombauts s de mb rouze p moreau y a higher - order background model improves the detection of promoter regulatory elements by gibbs sampling bioinformatics 2001 17 1113 1122 11751219 10.1093 / bioinformatics / 17.12.1113 workman ct stormo gd ann - spec : a method for discovering transcription factor binding sites with improved specificity pac symp biocomput 2000 467 478 10902194 bailey tl williams n misleh c li ww meme : discovering and analyzing dna and protein sequence motifs nucleic acids res 2006 34 w369 w373 16845028 10.1093 / nar / gkl198 grundy wn bailey tl elkan cp baker me meta - meme : motif - based hidden markov models of protein families comput appl biosci 1997 13 397 406 9283754 ao w gaudet j kent wj muttumu s mango se environmentally induced foregut remodeling by pha - 4 / foxa and daf - 12 / nhr science 2004 305 1743 1746 15375261 10.1126 / science.1102216 hardin ct rouchka ec dna motif detection using particle swarm optimization and expectation - maximization proceedings of the 2005 ieee swarm intelligence symposium 2005 eskin e pevzner pa finding composite regulatory patterns in dna sequences bioinformatics 2002 18 suppl 1 s354 s363 12169566 hertz gz stormo gd identifying dna and protein patterns with statistically significant alignments of multiple sequences bioinformatics 1999 15 563 577 10487864 10.1093 / bioinformatics / 15.7.563 liu x brutlag dl liu js bioprospector : discovering conserved dna motifs in upstream regulatory regions of co - expressed genes pac symp biocomput 2001 127 138 11262934 pavesi g mereghetti p mauri g pesole g weeder web : discovery of transcription factor binding sites in a set of sequences from co - regulated genes nucleic acids res 2004 32 w199 w203 15215380 10.1093 / nar / gkh465 sinha s tompa m ymf : a program for discovery of novel transcription factor binding sites by statistical overrepresentation nucleic acids res 2003 31 3586 3588 12824371 10.1093 / nar / gkg618 van hj rios af collado - vides j discovering regulatory elements in non - coding sequences by analysis of spaced dyads nucleic acids res 2000 28 1808 1818 10734201 10.1093 / nar / 28.8.1808 xing ep wu w jordan mi karp rm logos : a modular bayesian model for de novo motif detection proc ieee comput soc bioinform conf 2003 2 266 276 16452802 pevzner pa sze sh combinatorial approaches to finding subtle signals in dna sequences proc int conf intell syst mol biol 2000 8 269 278 10977088 tompa m li n bailey tl church gm de mb eskin e favorov av frith mc fu y kent wj makeev vj mironov aa noble ws pavesi g pesole g regnier m simonis n sinha s thijs g van hj vandenbogaert m weng z workman c ye c zhu z assessing computational tools for the discovery of transcription factor binding sites nat biotechnol 2005 23 137 144 15637633 10.1038 / nbt1053 wingender e dietze p karas h knuppel r transfac : a database on transcription factors and their dna binding sites nucleic acids res 1996 24 238 241 8594589 10.1093 / nar / 24.1.238 engle ml burks c artificially generated data sets for testing dna sequence assembly algorithms genomics 1993 16 286 288 8486376 10.1006 / geno.1993.1180 coward e shufflet : shuffling sequences while conserving the k - let counts bioinformatics 1999 15 1058 1059 10745997 10.1093 / bioinformatics / 15.12.1058 rambaut a grassly nc seq - gen : an application for the monte carlo simulation of dna sequence evolution along phylogenetic trees comput appl biosci 1997 13 235 238 9183526 ponty y termier m denise a genrgens : software for generating random genomic sequences and structures bioinformatics 2006 22 1534 1535 16574695 10.1093 / bioinformatics / btl113 stein l boulder data interchange format 2002 bairoch a boeckmann b the swiss - prot protein sequence data bank nucleic acids res 1991 19 suppl 2247 2249 2041811 schwartz rm dayhoff m dayhoff m matrices for detecting distant relationships atlas of protein sequence and structure 1978 silver spring , md , national biomedical research foundation 353 358 bairoch a uniprotkb / swiss - prot release 52.0 statistics 2007 17202162 matsuda h taniguchi f hashimoto a an approach to detection of protein structural motifs using an encoding scheme of backbone conformations pac symp biocomput 1997 280 291 9390299 bairoch a prosite : a dictionary of sites and patterns in proteins nucleic acids res 1991 19 suppl 2241 2245 2041810 meme - submission form 2006 liu j gibbs motif sampler 2007